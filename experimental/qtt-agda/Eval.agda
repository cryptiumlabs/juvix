module Eval where

open import Prelude
open import Relation.Binary.Construct.Closure.ReflexiveTransitive as RT
open import Relation.Binary.Construct.Closure.Transitive as T
open import Relation.Binary.Construct.Closure.Symmetric as S
open import Relation.Binary.Construct.Union as U
open import QTT

private
 variable
  n : โ
  s sโฒ t tโฒ z zโฒ w wโฒ : Term n
  S Sโฒ T Tโฒ U Uโฒ : Type n
  ฯ ฯโฒ ฯ ฯโฒ : Usage n
  e eโฒ f fโฒ : Elim n

data _โฟแต_ : Rel (Term n) lzero
data _โฟแต_ : Rel (Elim n) lzero
infix 1 _โฟแต_ _โฟแต_

data _โฟแต_ where
  ฯ : [ t โฆ T ] โฟแต t

  ๐ทโ : ฯ โฟแต ฯโฒ โ ๐ท[ ฯ / S ] T โฟแต ๐ท[ ฯโฒ / S  ] T
  ๐ทโ : S โฟแต Sโฒ โ ๐ท[ ฯ / S ] T โฟแต ๐ท[ ฯ  / Sโฒ ] T
  ๐ทโ : T โฟแต Tโฒ โ ๐ท[ ฯ / S ] T โฟแต ๐ท[ ฯ  / S  ] Tโฒ

  ๐- : t โฟแต tโฒ โ ๐ t โฟแต ๐ tโฒ

  sucแต : ฯ โฟแต ฯโฒ โ sucแต ฯ โฟแต sucแต ฯโฒ
  sucแต-ฯ : sucแต ฯแต โฟแต ฯแต {n}

  +แตหก : ฯ โฟแต ฯโฒ โ ฯ +แต ฯ โฟแต ฯโฒ +แต ฯ
  +แตสณ : ฯ โฟแต ฯโฒ โ ฯ +แต ฯ โฟแต ฯ  +แต ฯโฒ
  +แต-0   : 0แต     +แต ฯ โฟแต ฯ
  +แต-suc : sucแต ฯ +แต ฯ โฟแต sucแต (ฯ +แต ฯ)
  +แต-ฯ   : ฯแต     +แต ฯ โฟแต ฯแต

  *แตหก : ฯ โฟแต ฯโฒ โ ฯ *แต ฯ โฟแต ฯโฒ *แต ฯ
  *แตสณ : ฯ โฟแต ฯโฒ โ ฯ *แต ฯ โฟแต ฯ  *แต ฯโฒ
  *แต-0   : 0แต     *แต ฯ      โฟแต 0แต
  *แต-suc : sucแต ฯ *แต ฯ      โฟแต ฯ +แต (ฯ *แต ฯ)
  *แต-ฯ0  : ฯแต     *แต 0แต     โฟแต 0แต {n}
  *แต-ฯs  : ฯแต     *แต sucแต ฯ โฟแต ฯแต
  *แต-ฯฯ  : ฯแต     *แต ฯแต     โฟแต ฯแต {n}

  [_] : e โฟแต eโฒ โ [ e ] โฟแต [ eโฒ ]

data _โฟแต_ where
  ฮฒ-โ : (๐ t โฆ ๐ท[ ฯ / S ] T) โ s โฟแต substแต (t โฆ T) (s โฆ S)
  โหก : f โฟแต fโฒ โ f โ s โฟแต fโฒ โ s
  โสณ : s โฟแต sโฒ โ f โ s โฟแต f โ sโฒ

  ฮฒ-๐ค0 : ๐ค-elim T z s w 0แต โฟแต z โฆ substแต T (0แต โฆ ๐ค)
  -- FIXME i think this is right?
  ฮฒ-๐คs : ๐ค-elim T z s w (sucแต ฯ) โฟแต
         let sโฒ = substแต s (ฯ โฆ ๐ค) ; Tโฒ = substแต T (sucแต ฯ โฆ ๐ค) in
         (sโฒ โฆ Tโฒ) โ [ ๐ค-elim T z s w ฯ ]
  ฮฒ-๐คฯ : ๐ค-elim T z s w ฯแต โฟแต w โฆ substแต T (ฯแต โฆ ๐ค)
  ๐ค-elimโ : T โฟแต Tโฒ โ ๐ค-elim T z s w ฯ โฟแต ๐ค-elim Tโฒ z  s  w  ฯ
  ๐ค-elimโ : z โฟแต zโฒ โ ๐ค-elim T z s w ฯ โฟแต ๐ค-elim T  zโฒ s  w  ฯ
  ๐ค-elimโ : s โฟแต sโฒ โ ๐ค-elim T z s w ฯ โฟแต ๐ค-elim T  z  sโฒ w  ฯ
  ๐ค-elimโ : w โฟแต wโฒ โ ๐ค-elim T z s w ฯ โฟแต ๐ค-elim T  z  s  wโฒ ฯ
  ๐ค-elimโ : ฯ โฟแต ฯโฒ โ ๐ค-elim T z s w ฯ โฟแต ๐ค-elim T  z  s  w  ฯโฒ

  โฆหก : s โฟแต sโฒ โ s โฆ S โฟแต sโฒ โฆ S
  โฆสณ : S โฟแต Sโฒ โ s โฆ S โฟแต s โฆ Sโฒ


module _ where
  open Relation hiding (_โช_)

  _โ : Pred (Term n) _
  T โ = Empty (T โฟแต_)
  infix 10 _โ

  _โฟ*_ _โฟ+_ _โฟ!_ : Rel (Term n) _
  _โฟ*_ = Star _โฟแต_
  _โฟ+_ = Plus _โฟแต_
  S โฟ! T = (S โฟ* T) ร (T โ)
  infix 1 _โฟ*_ _โฟ+_ _โฟ!_


  โฟแต-At โฟ+-At โฟ*-At โฟ!-At : โ n โ Rel (Term n) _
  โฟแต-At _ = _โฟแต_
  โฟ+-At _ = _โฟ+_
  โฟ*-At _ = _โฟ*_
  โฟ!-At _ = _โฟ!_

  โ-At : โ n โ Rel (Term n) _
  โ-At _ = Star $ SymClosure _โฟแต_

  _โ_ : Rel (Term n) _
  _โ_ = โ-At _
  infix 4 _โ_

  โ-isEquiv : Relation.IsEquivalence $ โ-At n
  โ-isEquiv =
    record { refl = ฮต ; sym = RT.reverse $ S.symmetric _โฟแต_ ; trans = _โโ_ }

  โ-setoid : โ โ Relation.Setoid _ _
  โ-setoid n = record { isEquivalence = โ-isEquiv {n} }

  module _ {n} where
    open Relation.IsEquivalence (โ-isEquiv {n}) public using ()
      renaming (refl to โ-refl ; sym to โ-sym ; trans to โ-trans)

  plus-star : _โฟ+_ โโ โฟ*-At n
  plus-star [ R ]           = R โ ฮต
  plus-star (_ โผโบโจ Rโ โฉ Rโ) = plus-star Rโ โโ plus-star Rโ

  star-plus : _โฟ*_ โโ (_โก_ โช โฟ+-At n)
  star-plus ฮต        = injโ refl
  star-plus (R โ Rs) with star-plus Rs
  star-plus (R โ Rs) | injโ refl = injโ [ R ]
  star-plus (R โ Rs) | injโ Rsโฒ  = injโ (_ โผโบโจ [ R ] โฉ Rsโฒ)

  star-โ : _โฟ*_ โโ โ-At n
  star-โ ฮต        = ฮต
  star-โ (R โ Rs) = fwd R โ star-โ Rs

  plus-โ : _โฟ+_ โโ โ-At n
  plus-โ = star-โ โ plus-star
