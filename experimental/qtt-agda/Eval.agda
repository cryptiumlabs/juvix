module Eval where

open import Prelude
open import QTT

open import Relation.Binary.Construct.Closure.ReflexiveTransitive as RT
  using (Star ; ฮต ; _โ_ ; _โโ_)
open import Relation.Binary.Construct.Closure.Transitive as T
  using (Plusโฒ ; [_] ; _โท_)
open import Relation.Binary.Construct.Closure.Symmetric as S
  using (SymClosure ; fwd ; bwd)
open import Relation.Binary.Construct.Union as U

open import Codata.Thunk using (Thunk ; force)
open import Codata.Delay as Delay using (Delay ; now ; later)


private
 variable
  n nโฒ : โ
  s sโฒ t tโฒ z zโฒ w wโฒ : Term n
  S Sโฒ T Tโฒ U Uโฒ : Type n
  ฯ ฯโฒ ฯ ฯโฒ : Usage n
  e eโฒ f fโฒ : Elim n

data _โฟแต_ : Rel (Term n) lzero
data _โฟแต_ : Rel (Elim n) lzero
infix 1 _โฟแต_ _โฟแต_

data _โฟแต_ where
  ฯ : [ t โฆ T ] โฟแต t

  ๐ทโ : ฯ โฟแต ฯโฒ โ ๐ท[ ฯ / S ] T โฟแต ๐ท[ ฯโฒ / S  ] T
  ๐ทโ : S โฟแต Sโฒ โ ๐ท[ ฯ / S ] T โฟแต ๐ท[ ฯ  / Sโฒ ] T
  ๐ทโ : T โฟแต Tโฒ โ ๐ท[ ฯ / S ] T โฟแต ๐ท[ ฯ  / S  ] Tโฒ

  ๐- : t โฟแต tโฒ โ ๐ t โฟแต ๐ tโฒ

  sucแต : ฯ โฟแต ฯโฒ โ sucแต ฯ โฟแต sucแต ฯโฒ
  sucแต-ฯ : sucแต ฯแต โฟแต ฯแต {n}

  +แตหก : ฯ โฟแต ฯโฒ โ ฯ +แต ฯ โฟแต ฯโฒ +แต ฯ
  +แตสณ : ฯ โฟแต ฯโฒ โ ฯ +แต ฯ โฟแต ฯ  +แต ฯโฒ
  +แต-0   : 0แต     +แต ฯ โฟแต ฯ
  +แต-suc : sucแต ฯ +แต ฯ โฟแต sucแต (ฯ +แต ฯ)
  +แต-ฯ   : ฯแต     +แต ฯ โฟแต ฯแต

  *แตหก : ฯ โฟแต ฯโฒ โ ฯ *แต ฯ โฟแต ฯโฒ *แต ฯ
  *แตสณ : ฯ โฟแต ฯโฒ โ ฯ *แต ฯ โฟแต ฯ  *แต ฯโฒ
  *แต-0   : 0แต     *แต ฯ      โฟแต 0แต
  *แต-suc : sucแต ฯ *แต ฯ      โฟแต ฯ *แต ฯ +แต ฯ
  *แต-ฯ0  : ฯแต     *แต 0แต     โฟแต 0แต {n}
  *แต-ฯs  : ฯแต     *แต sucแต ฯ โฟแต ฯแต
  *แต-ฯฯ  : ฯแต     *แต ฯแต     โฟแต ฯแต {n}

  [_] : e โฟแต eโฒ โ [ e ] โฟแต [ eโฒ ]

data _โฟแต_ where
  ฮฒ-โ : (๐ t โฆ ๐ท[ ฯ / S ] T) โ s โฟแต substแต (t โฆ T) (s โฆ S)
  โหก : f โฟแต fโฒ โ f โ s โฟแต fโฒ โ s
  โสณ : s โฟแต sโฒ โ f โ s โฟแต f โ sโฒ

  ฮฒ-๐ค0 : ๐ค-elim T z s w 0แต โฟแต z โฆ substแต T (0แต โฆ ๐ค)
  -- FIXME i think this is right?
  ฮฒ-๐คs : ๐ค-elim T z s w (sucแต ฯ) โฟแต
         let sโฒ = substแต s (ฯ โฆ ๐ค) ; Tโฒ = substแต T (sucแต ฯ โฆ ๐ค) in
         (sโฒ โฆ Tโฒ) โ [ ๐ค-elim T z s w ฯ ]
  ฮฒ-๐คฯ : ๐ค-elim T z s w ฯแต โฟแต w โฆ substแต T (ฯแต โฆ ๐ค)
  ๐ค-elimโ : T โฟแต Tโฒ โ ๐ค-elim T z s w ฯ โฟแต ๐ค-elim Tโฒ z  s  w  ฯ
  ๐ค-elimโ : z โฟแต zโฒ โ ๐ค-elim T z s w ฯ โฟแต ๐ค-elim T  zโฒ s  w  ฯ
  ๐ค-elimโ : s โฟแต sโฒ โ ๐ค-elim T z s w ฯ โฟแต ๐ค-elim T  z  sโฒ w  ฯ
  ๐ค-elimโ : w โฟแต wโฒ โ ๐ค-elim T z s w ฯ โฟแต ๐ค-elim T  z  s  wโฒ ฯ
  ๐ค-elimโ : ฯ โฟแต ฯโฒ โ ๐ค-elim T z s w ฯ โฟแต ๐ค-elim T  z  s  w  ฯโฒ

  โฆหก : s โฟแต sโฒ โ s โฆ S โฟแต sโฒ โฆ S
  โฆสณ : S โฟแต Sโฒ โ s โฆ S โฟแต s โฆ Sโฒ


private
  data Is-0   : Term n โ Set where is-0   : Is-0   $ 0แต {n}
  data Is-suc : Term n โ Set where is-suc : Is-suc $ sucแต ฯ
  data Is-ฯ   : Term n โ Set where is-ฯ   : Is-ฯ   $ ฯแต {n}

  data IsUsageCon : Term n โ Set where
    is-0   : IsUsageCon $ 0แต {n}
    is-suc : IsUsageCon $ sucแต ฯ
    is-ฯ   : IsUsageCon $ ฯแต {n}

  is-0? : Decidableโ $ Is-0 {n}
  is-0? (โ u) = no (ฮป ())
  is-0? ๐ค = no (ฮป ())
  is-0? (๐ท[ ฯ / S ] T) = no (ฮป ())
  is-0? (๐ t) = no (ฮป ())
  is-0? 0แต = yes is-0
  is-0? ฯแต = no (ฮป ())
  is-0? (sucแต ฯ) = no (ฮป ())
  is-0? (ฯ +แต ฯ) = no (ฮป ())
  is-0? (ฯ *แต ฯ) = no (ฮป ())
  is-0? [ e ] = no (ฮป ())

  is-suc? : Decidableโ $ Is-suc {n}
  is-suc? (โ u) = no (ฮป ())
  is-suc? ๐ค = no (ฮป ())
  is-suc? (๐ท[ ฯ / S ] T) = no (ฮป ())
  is-suc? (๐ t) = no (ฮป ())
  is-suc? 0แต = no (ฮป ())
  is-suc? ฯแต = no (ฮป ())
  is-suc? (sucแต ฯ) = yes is-suc
  is-suc? (ฯ +แต ฯ) = no (ฮป ())
  is-suc? (ฯ *แต ฯ) = no (ฮป ())
  is-suc? [ e ] = no (ฮป ())

  is-ฯ? : Decidableโ $ Is-ฯ {n}
  is-ฯ? (โ u) = no (ฮป ())
  is-ฯ? ๐ค = no (ฮป ())
  is-ฯ? (๐ท[ ฯ / S ] T) = no (ฮป ())
  is-ฯ? (๐ t) = no (ฮป ())
  is-ฯ? 0แต = no (ฮป ())
  is-ฯ? ฯแต = yes is-ฯ
  is-ฯ? (sucแต ฯ) = no (ฮป ())
  is-ฯ? (ฯ +แต ฯ) = no (ฮป ())
  is-ฯ? (ฯ *แต ฯ) = no (ฮป ())
  is-ฯ? [ e ] = no (ฮป ())

  isUsageCon? : Decidableโ $ IsUsageCon {n}
  isUsageCon? t with is-0? t | is-suc? t  | is-ฯ? t
  isUsageCon? _ | yes is-0   | s?         | ฯ?       = yes is-0
  isUsageCon? _ | no ยฌ0      | yes is-suc | ฯ?       = yes is-suc
  isUsageCon? _ | no ยฌ0      | no ยฌs      | yes is-ฯ = yes is-ฯ
  isUsageCon? _ | no ยฌ0      | no ยฌs      | no ยฌฯ    = no ฮป where
    is-0   โ ยฌ0 is-0
    is-suc โ ยฌs is-suc
    is-ฯ   โ ยฌฯ is-ฯ

  isTypeAnn? : (e : Elim n) โ Dec $ โ[ s ] โ[ S ] (e โก s โฆ S)
  isTypeAnn? (` x)              = no ฮป()
  isTypeAnn? (e โ s)            = no ฮป()
  isTypeAnn? (๐ค-elim T z s w ฯ) = no ฮป()
  isTypeAnn? (s โฆ S)            = yes (-, -, refl)

  isTyLam? : (e : Elim n) โ
             Dec (โ[ t ] โ[ ฯ ] โ[ S ] โ[ T ] (e โก ๐ t โฆ ๐ท[ ฯ / S ] T))
  isTyLam? (` x)                = no ฮป()
  isTyLam? (e โ s)              = no ฮป()
  isTyLam? (๐ค-elim T z s w ฯ)   = no ฮป()
  isTyLam? (โ u โฆ S)            = no ฮป()
  isTyLam? (๐ค โฆ S)              = no ฮป()
  isTyLam? (๐ท[ ฯ / Sโ ] T โฆ S)  = no ฮป()
  isTyLam? (๐ s โฆ โ u)          = no ฮป()
  isTyLam? (๐ s โฆ ๐ค)            = no ฮป()
  isTyLam? (๐ s โฆ ๐ท[ ฯ / S ] T) = yes (-, -, -, -, refl)
  isTyLam? (๐ s โฆ ๐ S)          = no ฮป()
  isTyLam? (๐ s โฆ 0แต)           = no ฮป()
  isTyLam? (๐ s โฆ ฯแต)           = no ฮป()
  isTyLam? (๐ s โฆ sucแต ฯ)       = no ฮป()
  isTyLam? (๐ s โฆ (ฯ +แต ฯ))     = no ฮป()
  isTyLam? (๐ s โฆ (ฯ *แต ฯ))     = no ฮป()
  isTyLam? (๐ s โฆ [ e ])        = no ฮป()
  isTyLam? (0แต โฆ S)             = no ฮป()
  isTyLam? (ฯแต โฆ S)             = no ฮป()
  isTyLam? (sucแต ฯ โฆ S)         = no ฮป()
  isTyLam? ((ฯ +แต ฯ) โฆ S)       = no ฮป()
  isTyLam? ((ฯ *แต ฯ) โฆ S)       = no ฮป()
  isTyLam? ([ e ] โฆ S)          = no ฮป()


stepแต : (t : Term n) โ Dec (โ (t โฟแต_))
stepแต : (e : Elim n) โ Dec (โ (e โฟแต_))

stepแต (โ u) = no ฮป()
stepแต ๐ค     = no ฮป()

stepแต (๐ท[ ฯ / S ] T) with stepแต ฯ
stepแต (๐ท[ ฯ / S ] T) | yes (_ , Rฯ)                   = yes (-, ๐ทโ Rฯ)
stepแต (๐ท[ ฯ / S ] T) | no ยฌRฯ with stepแต S
stepแต (๐ท[ ฯ / S ] T) | no ยฌRฯ | yes (_ , RS)          = yes (-, ๐ทโ RS)
stepแต (๐ท[ ฯ / S ] T) | no ยฌRฯ | no ยฌRS with stepแต T
stepแต (๐ท[ ฯ / S ] T) | no ยฌRฯ | no ยฌRS | yes (_ , RT) = yes (-, ๐ทโ RT)
stepแต (๐ท[ ฯ / S ] T) | no ยฌRฯ | no ยฌRS | no ยฌRT       = no ฮป where
  (_ , ๐ทโ Rฯ) โ ยฌRฯ (-, Rฯ)
  (_ , ๐ทโ RS) โ ยฌRS (-, RS)
  (_ , ๐ทโ RT) โ ยฌRT (-, RT)

stepแต (๐ t) with stepแต t
stepแต (๐ t) | yes (_ , R) = yes (-, ๐- R)
stepแต (๐ t) | no  ยฌR      = no ฮป{(_ , ๐- R) โ ยฌR (-, R)}

stepแต 0แต = no ฮป()
stepแต ฯแต = no ฮป()

stepแต (sucแต ฯ) with is-ฯ? ฯ
stepแต (sucแต .ฯแต) | yes is-ฯ              = yes (-, sucแต-ฯ)
stepแต (sucแต ฯ)   | no  ฯโขฯ with stepแต ฯ
stepแต (sucแต ฯ)   | no  ฯโขฯ | yes (_ , R) = yes (-, sucแต R)
stepแต (sucแต ฯ)   | no  ฯโขฯ | no  ยฌR      = no ฮป where
  (_ , sucแต R) โ ยฌR (-, R)
  (_ , sucแต-ฯ) โ ฯโขฯ is-ฯ

stepแต (ฯ +แต ฯ) with isUsageCon? ฯ
stepแต (.0แต +แต ฯ)       | yes is-0                      = yes (-, +แต-0)
stepแต (.(sucแต _) +แต ฯ) | yes is-suc                    = yes (-, +แต-suc)
stepแต (.ฯแต +แต ฯ)       | yes is-ฯ                      = yes (-, +แต-ฯ)
stepแต (ฯ +แต ฯ)         | no ยฌu with stepแต ฯ
stepแต (ฯ +แต ฯ)         | no ยฌu | yes (_ , Rฯ)          = yes (-, +แตหก Rฯ)
stepแต (ฯ +แต ฯ)         | no ยฌu | no ยฌRฯ with stepแต ฯ
stepแต (ฯ +แต ฯ)         | no ยฌu | no ยฌRฯ | yes (_ , Rฯ) = yes (-, +แตสณ Rฯ)
stepแต (ฯ +แต ฯ)         | no ยฌu | no ยฌRฯ | no ยฌRฯ       = no ฮป where
  (_ , +แตหก R)  โ ยฌRฯ (-, R)
  (_ , +แตสณ R)  โ ยฌRฯ (-, R)
  (_ , +แต-0)   โ ยฌu is-0
  (_ , +แต-suc) โ ยฌu is-suc
  (_ , +แต-ฯ)   โ ยฌu is-ฯ

stepแต (ฯ *แต ฯ) with isUsageCon? ฯ
stepแต (.0แต *แต ฯ)         | yes is-0                         = yes (-, *แต-0)
stepแต (.(sucแต _) *แต ฯ)   | yes is-suc                       = yes (-, *แต-suc)
stepแต (.ฯแต *แต ฯ)         | yes is-ฯ with isUsageCon? ฯ
stepแต (.ฯแต *แต .0แต)       | yes is-ฯ | yes is-0              = yes (-, *แต-ฯ0)
stepแต (.ฯแต *แต .(sucแต _)) | yes is-ฯ | yes is-suc            = yes (-, *แต-ฯs)
stepแต (.ฯแต *แต .ฯแต)       | yes is-ฯ | yes is-ฯ              = yes (-, *แต-ฯฯ)
stepแต (.ฯแต *แต ฯ)         | yes is-ฯ | no ยฌuฯ with stepแต ฯ
stepแต (.ฯแต *แต ฯ)         | yes is-ฯ | no ยฌuฯ | yes (_ , Rฯ) = yes (-, *แตสณ Rฯ)
stepแต (.ฯแต *แต ฯ)         | yes is-ฯ | no ยฌuฯ | no ยฌRฯ       = no ฮป where
  (_ , *แตสณ Rฯ) โ ยฌRฯ (-, Rฯ)
  (_ , *แต-ฯ0)  โ ยฌuฯ is-0
  (_ , *แต-ฯs)  โ ยฌuฯ is-suc
  (_ , *แต-ฯฯ)  โ ยฌuฯ is-ฯ
stepแต (ฯ *แต ฯ) | no ยฌuฯ with stepแต ฯ
stepแต (ฯ *แต ฯ) | no ยฌuฯ | yes (_ , Rฯ)          = yes (-, *แตหก Rฯ)
stepแต (ฯ *แต ฯ) | no ยฌuฯ | no ยฌRฯ with stepแต ฯ
stepแต (ฯ *แต ฯ) | no ยฌuฯ | no ยฌRฯ | yes (_ , Rฯ) = yes (-, *แตสณ Rฯ)
stepแต (ฯ *แต ฯ) | no ยฌuฯ | no ยฌRฯ | no ยฌRฯ       = no ฮป where
  (_ , *แตหก R)  โ ยฌRฯ (-, R)
  (_ , *แตสณ R)  โ ยฌRฯ (-, R)
  (_ , *แต-0)   โ ยฌuฯ is-0
  (_ , *แต-suc) โ ยฌuฯ is-suc
  (_ , *แต-ฯ0)  โ ยฌuฯ is-ฯ
  (_ , *แต-ฯs)  โ ยฌuฯ is-ฯ
  (_ , *แต-ฯฯ)  โ ยฌuฯ is-ฯ

stepแต [ e ] with isTypeAnn? e
stepแต [ .(s โฆ S) ] | yes (s , S , refl)   = yes (-, ฯ)
stepแต [ e ]        | no ยฌโฆ with stepแต e
stepแต [ e ]        | no ยฌโฆ | yes (_ , Re) = yes (-, [ Re ])
stepแต [ e ]        | no ยฌโฆ | no ยฌRe       = no ฮป where
  (_ , ฯ)      โ ยฌโฆ  (-, -, refl)
  (_ , [ Re ]) โ ยฌRe (-, Re)

stepแต (` x) = no ฮป()

stepแต (e โ s) with isTyLam? e
stepแต (e โ s) | yes (t , ฯ , S , T , refl)    = yes (-, ฮฒ-โ)
stepแต (e โ s) | no ยฌ๐ with stepแต e
stepแต (e โ s) | no ยฌ๐ | yes (_ , Re)          = yes (-, โหก Re)
stepแต (e โ s) | no ยฌ๐ | no ยฌRe with stepแต s
stepแต (e โ s) | no ยฌ๐ | no ยฌRe | yes (_ , Rs) = yes (-, โสณ Rs)
stepแต (e โ s) | no ยฌ๐ | no ยฌRe | no ยฌRs       = no ฮป where
  (_ , ฮฒ-โ)   โ ยฌ๐ (-, -, -, -, refl)
  (_ , โหก Re) โ ยฌRe (-, Re)
  (_ , โสณ Rs) โ ยฌRs (-, Rs)

stepแต (๐ค-elim T z s w ฯ) with isUsageCon? ฯ
stepแต (๐ค-elim T z s w .0แต)       | yes is-0   = yes (-, ฮฒ-๐ค0)
stepแต (๐ค-elim T z s w .(sucแต _)) | yes is-suc = yes (-, ฮฒ-๐คs)
stepแต (๐ค-elim T z s w .ฯแต)       | yes is-ฯ   = yes (-, ฮฒ-๐คฯ)
... | no ยฌu with stepแต T
... | yes (_ , RT) = yes (-, ๐ค-elimโ RT)
... | no ยฌRT with stepแต z
... | yes (_ , Rz) = yes (-, ๐ค-elimโ Rz)
... | no ยฌRz with stepแต s
... | yes (_ , Rs) = yes (-, ๐ค-elimโ Rs)
... | no ยฌRs with stepแต w
... | yes (_ , Rw) = yes (-, ๐ค-elimโ Rw)
... | no ยฌRw with stepแต ฯ
... | yes (_ , Rฯ) = yes (-, ๐ค-elimโ Rฯ)
... | no ยฌRฯ = no ฮป where
  (_ , ฮฒ-๐ค0)       โ ยฌu is-0
  (_ , ฮฒ-๐คs)       โ ยฌu is-suc
  (_ , ฮฒ-๐คฯ)       โ ยฌu is-ฯ
  (_ , ๐ค-elimโ RT) โ ยฌRT (-, RT)
  (_ , ๐ค-elimโ Rz) โ ยฌRz (-, Rz)
  (_ , ๐ค-elimโ Rs) โ ยฌRs (-, Rs)
  (_ , ๐ค-elimโ Rw) โ ยฌRw (-, Rw)
  (_ , ๐ค-elimโ Rฯ) โ ยฌRฯ (-, Rฯ)

stepแต (s โฆ S) with stepแต s
stepแต (s โฆ S) | yes (_ , Rs)          = yes (-, โฆหก Rs)
stepแต (s โฆ S) | no ยฌRs with stepแต S
stepแต (s โฆ S) | no ยฌRs | yes (_ , RS) = yes (-, โฆสณ RS)
stepแต (s โฆ S) | no ยฌRs | no  ยฌRS      = no ฮป where
  (_ , โฆหก Rs) โ ยฌRs (-, Rs)
  (_ , โฆสณ RS) โ ยฌRS (-, RS)


module Derived {t โ} {F : โ โ Set t}
               (_โฟ_ : โ {n} โ Rel (F n) โ)
               (step  : โ {n} (t : F n) โ Dec (โ (t โฟ_)))
 where
  open Relation hiding (_โช_)

  private variable X Y Z : F n

  _โ : Pred (F n) _
  X โ = โ[ Y ] (X โฟ Y)
  infix 10 _โ

  _โฟ+_ _โฟ*_ _โฟ!_ : Rel (F n) _
  _โฟ+_ = Plusโฒ _โฟ_
  _โฟ*_ = Star _โฟ_
  X โฟ! Y = (X โฟ* Y) ร (Y โ)
  infix 1 _โฟ*_ _โฟ+_ _โฟ!_

  โฟ-At โฟ+-At โฟ*-At โฟ!-At : โ n โ Rel (F n) _
  โฟ-At _ = _โฟ_
  โฟ+-At _ = _โฟ+_
  โฟ*-At _ = _โฟ*_
  โฟ!-At _ = _โฟ!_

  โ-At : โ n โ Rel (F n) _
  โ-At _ = Star $ SymClosure _โฟ_

  _โ_ : Rel (F n) _
  _โ_ = โ-At _
  infix 4 _โ_

  โ-isEquiv : Relation.IsEquivalence $ โ-At n
  โ-isEquiv =
    record { refl = ฮต ; sym = RT.reverse $ S.symmetric _โฟ_ ; trans = _โโ_ }

  โ-setoid : โ โ Relation.Setoid _ _
  โ-setoid n = record { isEquivalence = โ-isEquiv {n} }

  module _ {n} where
    open Relation.IsEquivalence (โ-isEquiv {n}) public using ()
      renaming (refl to โ-refl ; sym to โ-sym ; trans to โ-trans)

  plus-star : _โฟ+_ โโ โฟ*-At n
  plus-star [ R ]    = R โ ฮต
  plus-star (R โท Rs) = R โ plus-star Rs

  star-plus : _โฟ*_ โโ (_โก_ โช โฟ+-At n)
  star-plus ฮต        = injโ refl
  star-plus (R โ Rs) = injโ $ R โทโฒ star-plus Rs where
    _โทโฒ_ : X โฟ Y โ (Y โก Z) โ (Y โฟ+ Z) โ X โฟ+ Z
    R โทโฒ injโ refl = [ R ]
    R โทโฒ injโ Rs   = R โท Rs

  star-โ : _โฟ*_ โโ โ-At n
  star-โ ฮต        = ฮต
  star-โ (R โ Rs) = fwd R โ star-โ Rs

  plus-โ : _โฟ+_ โโ โ-At n
  plus-โ = star-โ โ plus-star

  eval : (X : F n) โ โ[ Delay (โ[ Z ] (X โฟ! Z)) ]
  eval X with step X
  ... | no  V       = now (-, ฮต , V)
  ... | yes (Y , R) = later ฮป where .force โ cons-R $ eval Y
    where cons-R = Delay.map ฮป where (Z , Rs , V) โ Z , R โ Rs , V


open module Evalแต = Derived (ฮป {n} โ _โฟแต_ {n}) stepแต public using ()
  renaming (โฟ-At to โฟแต-At ;
            _โฟ+_ to _โฟแต+_ ; _โฟ*_ to _โฟแต*_ ; _โฟ!_ to _โฟแต!_ ;
            โฟ+-At to โฟแต+-At ; โฟ*-At to โฟแต*-At ; โฟ!-At to โฟแต!-At ;
            _โ to _โแต ; eval to evalแต ; _โ_ to _โแต_ ; โ-At to โแต-At)

open module Evalแต = Derived (ฮป {n} โ _โฟแต_ {n}) stepแต public using ()
  renaming (โฟ-At to โฟแต-At ;
            _โฟ+_ to _โฟแต+_ ; _โฟ*_ to _โฟแต*_ ; _โฟ!_ to _โฟแต!_ ;
            โฟ+-At to โฟแต+-At ; โฟ*-At to โฟแต*-At ; โฟ!-At to โฟแต!-At ;
            _โ to _โแต ; eval to evalแต ; _โ_ to _โแต_ ; โ-At to โแต-At)
