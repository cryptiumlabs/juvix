* After de-sugaring
#+BEGIN_SRC haskell
  data TopLevel
    = Type Type
    | ModuleOpen ModuleOpen
    | Function Function
    | TypeClass
    | TypeClassInstance
    deriving (Show)

  --------------------------------------------------------------------------------
  -- Types
  --------------------------------------------------------------------------------

  data Type
    = Typ
        { typeUsage :: Maybe Usage,
          typeName :: !Symbol,
          typeArgs :: [Symbol],
          typeForm :: TypeSum
        }
    deriving (Show)

  data TypeSum
    = Alias Alias
    | Data Data
    deriving (Show)

  -- | 'Data' is the data declaration in the Juvix language
  data Data
    = Arrowed
        { dataArrow :: Expression,
          dataAdt :: Adt
        }
    | NonArrowed
        { dataAdt :: Adt
        }
    deriving (Show)

  newtype Alias
    = AliasDec
        {aliasType' :: Expression}
    deriving (Show)

  --------------------------------------------------
  -- Arrows
  --------------------------------------------------
  data NamedType
    = NamedType
        { nameRefineName :: !Name,
          namedRefineRefine :: Expression
        }
    deriving (Show)

  -- TODO ∷ change TypeName to TypeNameModule
  data TypeRefine
    = TypeRefine
        { typeRefineName :: Expression,
          typeRefineRefinement :: Expression
        }
    deriving (Show)

  --------------------------------------------------
  -- Types Misc
  --------------------------------------------------

  data Name
    = Concrete !Symbol
    deriving (Show)

  data ArrowSymbol
    = ArrowUse Usage.T
    | ArrowExp Usage
    deriving (Show)

  -- TODO ∷ finish this type!
  newtype UniverseExpression
    = UniverseExpression Symbol
    deriving (Show)

  --------------------------------------------------
  -- ADTs
  --------------------------------------------------

  data Adt
    = Sum (NonEmpty Sum)
    | Product Product
    deriving (Show)

  data Sum
    = S
        { sumConstructor :: !Symbol,
          sumValue :: !(Maybe Product)
        }
    deriving (Show)

  data Product
    = Record !Record
    | Arrow Expression
    | ADTLike [Expression]
    deriving (Show)

  data Record
    = Record'
        { recordFields :: NonEmpty NameType,
          recordFamilySignature :: Maybe Expression
        }
    deriving (Show)

  data NameType
    = NameType
        { nameTypeSignature :: Expression,
          nameTypeName :: !Name
        }
    deriving (Show)

  --------------------------------------------------------------------------------
  -- Functions And Modules
  --------------------------------------------------------------------------------
  s
  -- | 'Function' is a normal signature with a name arguments and a body
  -- that may or may not have a guard before it
  newtype Function
    = Func (FunctionLike Expression)
    deriving (Show)

  -- | 'FunctionLike' is the generic version for both modules and functions
  data FunctionLike a
    = Like
        { functionLikedName :: Symbol,
          functionLikeArgs :: [Arg],
          functionBody :: Expression
        }
    deriving (Show)

  newtype ModuleOpen
    = Open ModuleName
    deriving (Show)

  data ModuleOpenExpr
    = OpenExpress
        { moduleOpenExprModuleN :: ModuleName,
          moduleOpenExprExpr :: Expression
        }
    deriving (Show)

  -- Very similar to name, but match instead of symbol
  data Arg
    = ConcreteA MatchLogic
    deriving (Show)

  type ModuleName = NameSymb

  type Usage = Expression
  --------------------------------------------------------------------------------
  -- Type Classes
  --------------------------------------------------------------------------------

  --------------------------------------------------------------------------------
  -- Expression
  --------------------------------------------------------------------------------

  data Expression
    = Constant Constant
    | Let Let
    | LetType LetType
    | Match Match
    | Name NameSymb
    | OpenExpr ModuleOpenExpr
    | Lambda Lambda
    | Application Application
    | Block Block
    | ExpRecord ExpRecord
    | -- Added due to merge
      ArrowE ArrowExp
    | NamedTypeE NamedType
    | RefinedE TypeRefine
    | UniverseName UniverseExpression
    deriving (Show)

  data ArrowExp
    = Arr'
        { arrowExpLeft :: Expression,
          arrowExpUsage :: Usage,
          arrowExpRight :: Expression
        }
    deriving (Show)

  data Constant
    = Number Numb
    | String String'
    deriving (Show)

  data Numb
    = Integer' Integer
    | Double' Double
    deriving (Show)

  newtype String'
    = Sho Text
    deriving (Show)

  newtype Block
    = Bloc
        {blockExpr :: Expression}
    deriving (Show)

  data Lambda
    = Lamb
        { lambdaArgs :: NonEmpty MatchLogic,
          lambdaBody :: Expression
        }
    deriving (Show)

  data Application
    = App
        { applicationName :: NameSymb,
          applicationArgs :: NonEmpty Expression
        }
    deriving (Show)

  newtype ExpRecord
    = ExpressionRecord
        { expRecordFields :: NonEmpty (NameSet Expression)
        }
    deriving (Show)

  --------------------------------------------------
  -- Symbol Binding
  --------------------------------------------------


  data Let
    = Let'
      { letBindings :: FunctionLike Expression,
        letBody :: Expression
      }
    deriving (Show)

  data LetType
    = LetType'
      { letTypeBindings :: Type,
        letTypeBody :: Expression
      }
    deriving (Show)

  --------------------------------------------------
  -- Matching
  --------------------------------------------------

  data Match
    = Match'
        { matchOn :: Expression,
          matchBindigns :: NonEmpty MatchL
        }
    deriving (Show)

  data MatchL
    = MatchL
        { matchLPattern :: MatchLogic,
          matchLBody :: Expression
        }
    deriving (Show)

  -- TODO ∷ add literals to the match
  data MatchLogic
    = MatchLogic
        { matchLogicContents :: MatchLogicStart,
          matchLogicNamed :: Maybe NameSymb
        }
    deriving (Show)

  data MatchLogicStart
    = MatchCon ConstructorName [MatchLogic]
    | MatchName Symbol
    | MatchConst Constant
    | MatchRecord (NonEmpty (NameSet MatchLogic))
    deriving (Show)

  data NameSet t
    = Bind
    -- Type will be in the bound itself!
    { nameSetName :: NameSymb,
      nameSetUsage :: Maybe Usage,
      bound :: t
    } deriving (Show)

  type ConstructorName = NameSymb

  type NameSymb = NonEmpty Symbol
#+END_SRC
