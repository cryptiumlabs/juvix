* Usage Syntax
** Inside Arrows (Jeremy)
*** Arrows
**** Initial Idea
- Arrow syntax is relatively simple

- Without sugar all arrows will look like

  #+BEGIN_SRC idris
    f : (x : Int) -1-> (y : Int) -w-> C -(x+y)-> D
  #+END_SRC
-
  + Note :: In the unicode extension ω can replace w
  + Note :: the last arrow requires dependent useages

- With sugar it would look something like this
  #+BEGIN_SRC idris
    f : (x : Int) -o (y : Int) -> C -(x+y)-> D
  #+END_SRC
  + We can see that -o stands for 1 useage, and -> stands for
    unlimited useages
  + Note :: In the unicode extension → can replace ->
  + Note :: In the unicode extension  ⊸ can replace -o
***  Stand alone usages
- Due to arrows being only applicable with bindings, we can not
  determine the useage of the following

   #+BEGIN_SRC idris
     f : A
   #+END_SRC
- Thus we may want a way to quantify the useage of variables without arrows.

- The following ideas were thought of

  #+BEGIN_SRC idris
    f 2 : A

    f : A ~2
    f : ~2 A
  #+END_SRC
  + The first idea was rejected because it is ambiguous in some
    situations
  + I also don't fully like the second, as how does this work with
    named arguments? It seems like arbitrary extra syntax
  + Thus I would like suggestions on what this should look like.
*** Underlying philosophy
- Noise is bad for reading code and is detail that one should be able
  to reason about effectively.
- For Arrows, this means that users should be able to read the default
  arrows as one would from other languages (→ means unlimited usages
  in other languages).
  + There is a de-sugared arrows that new users can use instead while learning?
** Consistent Usages (Chris)
- Instead of having special arrows as described in the initial idea,
  instead have usage come be the first variable after every :
  #+BEGIN_SRC idris
    f : 2 (x : 3 Int) -> Double

    f : w (x : 2 Int -> y : 1 () -> IO ())
  #+END_SRC
- This is consistent, since every variable has sugar
*** Underlying philosophy
- TODO (Chris)
** Analysis
- _Inside Arrows_
  + pros
    * Cleaner type signatures
    * Clean sugar and familiar sugar
  + cons
    * Implicit for beginners
- _Consistent Usages_
  + pros
    * More explicit
    * Gets users more used to usage
  + cons
    * A few extra characters for every signature
    * How does sugar get added from this system? (Jeremy)
* Module Syntax
Currently there are two roads we can go down in regards to module
syntax.

- mariari :: I personally prefer the "like functions" syntax as it
             seems writing modules are encouraged, and feel very
             natural to anyone who has been using the language but
             with functions only. There is no bifurcation of syntax,
             where modules look like this special thing (ala OCaml).

- Point redacted :: it seems the first syntax does not require special
                    casing.
                    #+BEGIN_SRC haskell
                    <name> =
                      foo a = 3
                    #+END_SRC
                    in the above example, it's unambiguous what <name>
                    is, as expression ≠ top level!
** Like Functions
The like functions syntax would look something like this
#+BEGIN_SRC idris
  Foo : Module
    type a
    foo : a -> a
  Foo =
    type a = int

    foo : int -> int
    foo c = c + 2

  type sig = Module
    type a
    foo : a -> a
    val : int -> a

  Foo : sig -> Module
  Foo A =
    type t = A.t
    val x = A.(foo (int x))
#+END_SRC
- _Pros_
  1. Typing Modules is lightweight
     - Thus encourages module use!
  2. Modules look like functions and thus familiar
     - Lower barrier of entry and confusion and forgetting of syntax
- _Cons_
  2. Module signature is special cased
  3. We may need an end for the =Module= keyword
     - This depends on how indent sensitive we wish to be
** Haskell/Idris Like
The Haskell/Idris like syntax would look like
#+BEGIN_SRC idris
  module Foo sig
    type a
    foo : a -> a
  module Foo where
    type a = int

    foo : int -> int
    foo c = c + 2

  module t sig
    type a
    foo : a -> a
    val : int -> a

  module Foo (A : t) where
    type t = A.t
    val x = A.(foo (int x))
#+END_SRC
- The functor and signature syntax could use some refinement
- _Pros_
  1. Looks Familiar to existing ML solutions
- _Cons_
  1. requires a lot of special casing
     - Higher barrier to entry, and forgetting of syntax
  2. A lot more special casing in the implementation
  3. Heavier syntax
     - This means module usage is more discouraged
* Additive conjunction
** Initial ideas (Jeremy)
- The literature uses `&` for this, however to be less confusing for the user I suggest this
  #+BEGIN_SRC idris
     Data A : Set where
       | F : X \/ Y -o A

     f : (x : A) -o X
    f x = (_1 x)
  #+END_SRC
  + Note :: _1 is a placeholder for a better name of accessing the
            first variant without being able to inspect on the second
  + Note :: in the unicode extension ∨ can replace `\/`
* If/Cond Syntax
