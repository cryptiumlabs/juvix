* language-config
configuration file for code generation
* src
** code-generation
- _Relies on_
  + [[context]]
  + [[utility]]
  + [[types]]
  + [[type-signature]]
  + [[maybe]]
** context
- This module servers as the abstraction from the first class
  module design of this application.
  + This module does this by simply wrapping all module calls in
    proper function calls that dispatch to the inner module table
    that is formed.
  + This inner module table is then passed back to the higher
    level as the context that must be passed back down.
- This module also handles the parsing and initialization of the
  sexp config itself.
  + This config file has all the parameters that a specific module
    needs to run its =initialize= function.
- _Relies on_
  + [[haskell]]
  + [[types]]
*** Module Hash Table
The layout of the Module specific module table is as follows.
#+BEGIN_EXAMPLE
  module.*extension* ---> { module, module.context }
#+END_EXAMPLE
  + module.context is created by calling =module.initialize= on
    the config sexp that is given in
*** Interface for valid modules
#+BEGIN_SRC lisp
  (sig import-generation (-> context fset:map file-info-extended list))
  (sig module-comments   (-> file-info-extended list))
  (sig initalize         (-> list module.context))
  (sig convert-path      (-> pathname context t))
  ;; the t here can be anything the module needs!
#+END_SRC
** haskell
This Package gives the proper functions for org-generation of a
language to work
- _Relies on_
  + [[maybe]]
  + [[types]]
** lisp
This Package gives the proper functions for org-generation of a
language to work
- _Relies on_
  + [[types]]
  + [[maybe]]
  + [[type-signature]]
** maybe
** type-signature
** types
- _Relies on_
  + [[maybe]]
  + [[type-signature]]
** utility
- _Relies on_
  + [[type-signature]]
* test
** run-tests
