* =Src=
** =Juvix=
*** Library
- The standard Library for the project
  + Thus all code will depend on this module without stating otherwise
- Is mostly =Protolude= except with a few changes
  + _Additions_
    * ∨   :: Serves as an or function
    * ∧   :: Serves as an and function
    * |<< :: Serves as a map function
    * >>| :: Serves as the flip map function
  + _Changes_
    * The Capability library is imported and replaces the standard =MTL=
      constructs in =Protolude=
*** Utility
- Utility functions for the Juvix code base
  + Like Library dependencies on this file will not be listed here
*** Back-ends
- This servers as the back-end evaluator for the various interaction
  [[Nets]]
**** Env
- Env serves as the environment for running the back-ends
  + This includes the diagnostic information about how the code is ran
  + Also includes the effect handler types and the runner functions
    for them
- Also gives functions needed to increment diagnostic information
  + see =incGraphStepSize= and =sequentalStep=
  + File will also be imported in [[Nets]] due to these two functions
**** Interface
- Interface serves as a file that has common types between the various
  back ends along with two interfaces each back-end must support
  + This also includes functions derived from the interface functions!
- This file will be the file [[Nets]] will import as it provides the
  interface along with derived functions
- _Relies on_
  + [[NodeInterface]]
**** Maps
- this is an implementation of said interface using the =EnumMap= data structure
- This code will be imported in [[Tests]] as a possible back-end for testing
**** Graph <<Graph>>
- This is an implementation of said interfacing using =FGL=
- This code will imported in [[Tests]] as a possible back-end for testing.
  + This back-end is more useful than [[Maps]] as it can produce
    graphical outputs, see [[Visualize]]
*** Nets
- This folder serves as interaction net evaluators for various object
  languages
- _Relies on_
  1. [[Back-ends]]
  2. [[NodeInterface]]
**** =Bohm= <<Bohm>>
- An evaluator for the Bohm Language
- Serves as a reference way of creating interaction nets
**** =Combinators=
- An evaluation for a simple combination calculus language, only has
  three ports
  1. Con
  2. Dup
  3. Era
*** Encoding
- This directory hosts all encoding information of =ADT='s into simply
  typed lambda terms
**** Types <<Encoding/Types>>
- Gives the various types needed to talk about Match statements and
  lambdas in some abstract syntax
  + Most of this will eventually be merged with a layer above =Juvix=
    Core and will be moved into other places
- What will not however move at a later point is the environment types
  features in this file, as it provides an unique runner for the
  effects by the various Lambda Translators
**** Encoding <<Encoding>>
- This provides generic functions used by the various encodings in
  this directory
- _Relies on_
  + [[Encoding/Types]]
**** Mendler
- Gives a =Mendler= encoding from an =ADT=.
- This file is not done as Ι have yet to find a way to convert any
  general recursive function into a proper =Mendler= form.
- This however will do the boilerplate of changing an =ADT= to
  =Mendler= and the structure of a case expression into proper
  =Mendler= form
- _Relies on_
  + [[Encoding/Types]]
  + [[Encoding]]
**** Scott
- Gives a =Scott= encoding from an =ADT= and works properly for case
  expressions
- Overall this encoding just works™
- _Relies on_
  + [[Encoding/Types]]
  + [[Encoding]]
*** =Bohm=
- This directory gives the implementation of the abstract syntax of
  =Bohm= and the translation to interaction nets
- The formal bnf can be found in [[Doc/Bohm]]
**** Parser
- Parses the syntax according to the formal =BNF=
- _Relies on_
  + [[Bohm/Types]]
**** Types <<Bohm/Types>>
- Serves as the abstract syntax of =Bohm=
**** Translation
- Translates =Bohm='s abstract syntax into Interaction nets
- _Relies on_
  + [[Back-ends]]
  + [[Bohm/Types]]
*** =Eal=
- This directory contains the implementation of =Eal= and the inferred
  bracket checker on =Eal=
**** Parser
- A parser into the old version of the =Eal= types
- _Relies on_
  + [[Eal/Eal]]
**** =Eal= <<Eal/Eal>>
- Old version of the =Eal= Term checker
- Also includes a type checker and a bracket checker
- _Relies on_
  + [[Bohm/Types]]
**** Types2 <<Eal/Types2>>
- Serves as the abstract type for the new =Eal= evaluator
- Also includes the environment from which to run =Eal=
**** Eal2
- A term and type infer-er for bang placement
  + Deals with details such as unification
- _Relies on_
  + [[Eal/Types2]]
**** Solve
- A Z3 solver for the generated =Eal= Constraints
- Can generate multiple constraints that will be used along side the
  Bracket checker to confirm that the solved constraints Z3 gives us
  is correct
- _Relies on_
  + [[Eal/Types2]]
*** Visualize
- Serves as the directory where all graphical visualizations of
  interaction nets should go
**** Dot
- Generates a dot file in order to produce a simple image of a
  interaction net
- Also provides a way of generating gifs (and the images used to
  generate said gif), displaying every reduction step until the term
  is normalized
- _Relies on_
  + [[Back-ends]]
    * [[Graph]] in particular
  + [[Bohm]]
**** Graph
- A simple function for showing the graph as a proper net
- Really should be improved upon or removed
- _Relies on_
  + [[Dot]]
*** NodeInterface
- Serves as a generic lens layer for various Node types in interaction nets
  1. Primary port details
     - Open or Bound?
  2. Auxiliary port details
     - Open or Bound?
  3. Type Classes aliases for having just a Primary port, or an
     Auxiliary port and a Primary, or two Auxiliary ports and a
     primary, and so forth.
* Tests
** Bohm
- Tests all code involved with =Bohm=
- From generating Nets, to running them, to even generating images
  + see test76Gen to see how to generate images
** Eal
- Tester for the old =Eal= code
** Eal2
- Tester for the new =Eal= code
** Encoding
- Deals with the Scott and =Mendler= encoding of structures, run
  against the Lisp in playgrounds to see if they are correct
** Nets
- By hand generated =FGL= nets of =Bohm= and =Combinators= Probably
  should delete later
* Doc
** Bohm <<Doc/Bohm>>
- Contains the formal =BNF= of the =Bohm= syntax
  + Improved from the paper to be non ambiguous
- Also contains a railroad diagram to better play with the syntax
* Experimental
** Playground
*** =Scott=
- Hand written examples in LISP of the =Scott= encoding
- Also generated Haskell code was put here and made into valid LISP
*** =Mendler=
- Hand written examples in LISP of the =Mendler= encoding
- Also generated Haskell code was put here and made into valid LISP
*** =Eal=
- A nicely laid out =GADT= encoding of =Eal= failed eventually due to
  =kindedness=
- Useful to reflect on strict types without dependent type theory!
