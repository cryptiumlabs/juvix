* Backends
** LLVM
*** Setup <<LLVM/Setup>>
*** src
**** Juvix
***** Backends
****** LLVM <<Backends/LLVM>>
- Serves as the LLVM backend compiler to Juvix.
- This is an alternative to the interpreter provided.
******* DSL
Serves as a mini DSL layer above LLVM
- _Relies on_
  + [[Codegen]]
  + [[Library]]
******** What is included?
1. _Relink_
   - gives a declarative way to do a bunch of links and relinks
******* Translation <<LLVM/Translation>>
Translates erased core terms (must be EAC-typable) to native interaction nets in LLVM, evaluates it, and reads-back the resulting term.
TODO: Separate out the common logic from the interpreter & this file into a shared module.
- _Relies on_
  + [[JIT]]
  + [[MonadEnvironment]]
  + [[Net/Environment]]
  + [[Erased/Types]]
  + [[Core/Types]]
  + [[INetIR/Types]]
  + [[InteractionNet]]
  + [[Backends/Graph]]
  + [[Interface]]
  + [[InteractionNet/Nets/Default]]
  + [[Library]]
******* Codegen
- _Relies on_
  + [[Block]]
  + [[Constants]]
  + [[Codegen/Graph]]
  + [[Codegen/Shared]]
  + [[Codegen/Types]]
******** Block
- Has the code necessary to generate LLVM Code
- _Relies on_
  + [[Codegen/Shared]]
  + [[Codegen/Types]]
  + [[Library]]
  + [[HashMap]]
******** Constants
Module for predefined constants
- _Relies on_
  + [[Library]]
******** Default <<Codegen/Default>>
This module provides the default environment to run LLVM code in
******** Shared <<Codegen/Shared>>
Shared between Types and Sum
- _Relies on_
  + [[Library]]
  + [[HashMap]]
******** Sum
Provides a mechanism for defining Sum types
- Has the code to encode a sum type via what is defined by the user or
  what is defined to create the interaction net system.
- _Relies on_
  + [[Constants]]
  + [[Codegen/Shared]]
  + [[Library]]
  + [[HashMap]]
******** Types <<Codegen/Types>>
- _Relies on_
  + [[Codegen/Shared]]
  + [[Sum]]
  + [[Library]]
  + [[HashMap]]
******** Graph <<Codegen/Graph>>
Serves as a front end for the Graph folder
- _Relies on_
  + [[Graph/Debug]]
  + [[Definitions]]
  + [[Operations]]
********* Debug <<Graph/Debug>>
Serves as a module for various debugging functions
- _Relies on_
  + [[Block]]
  + [[Operations]]
  + [[Codegen/Types]]
  + [[Library]]
********* Definitions
Operations necessary to update nodes
- =mainPort=, =auxiliary1= \dots =auxiliary4= allocation
  | Part       | Alloca Or Malloc |
  |------------+------------------|
  | MainPort   | Malloc top level |
  | Auxiliary1 | Malloc top level |
  | Auxiliary2 | Malloc top level |
  | Auxiliary3 | Malloc top level |
  | Auxiliary4 | Malloc top level |
- =mallocNodeH= Allocation
  + layout :
    Node[portSize | PortArray[portLocation | NodePtr] | DataArray[Data]]
  | Part         | Alloca Or Malloc                   |
  |--------------+------------------------------------|
  | Node         | Malloc                             |
  | portSize     | Stored on Node malloc              |
  | PortArray    | Malloc                             |
  | DataArray    | Malloc Maybe                       |
  | PortLocation | (Null) Allocad from PortArray Call |
  | NodePtr      | (Null) Allocad from PortArray Call |
  | Data         | (Null) Allocad from DataArray Call |
  + _Sub allocation functions used_
    * =mallocNode=
      | node | Malloc |
    * =allocaNumPortNum=
      | portsSize | Alloca |
    * =mallocPortsH=
      | portArray | Malloc |
    * =mallocDataH=
      | dataArray | Malloc |
  + the values that are null will be set from outside when the node
    is instantiated.
    * Data will be **Allocad**
    * Port Location is shown to be **malloc** above by =mainPort=
      \dots =Auxiliary4=. However in the future we may **alloca** a value
      to store here
    * NodePtr is **mallocd** in the same way this node is, and thus
      is external
- Notably PortLocation, NodePtr, and Data are not allocated here,
  but are instead sent in.
- Currently =defineMainPort=, =defineAuxiliary1= \dots
  =defineAuxiliary4= malloc the first four ports, and this is what
  link sets for the nodes.
  + This has some trade offs, namely we don't have to alloca more
    ports, however this will lead to waste if say =auxiliary4= is
    never used.
  + In the future this should turn to an alloca, and thus to
    dealloc a node, we need not iterate over i.
- For deallocation, just deallocate the node pointer itself
  + Currently, node pointers are allocated when nodes are made, and
    so are not the responsibility of a node to deallocate all the
    pointers.
    * this however is up to the Net representation themselves, and
      thus should modify the default deallocate node functionality
- _Relies on_
  + [[Block]]
  + [[Graph/Debug]]
  + [[Operations]]
  + [[Codegen/Types]]
  + [[Library]]
********* Operations
Functions that help with more complex Graph operations
- _Relies on_
  + [[Block]]
  + [[Codegen/Types]]
  + [[Library]]
******* JIT
- _Relies on_
  + [[Execution]]
  + [[JIT/Types]]
  + [[Library]]
******** Execution
- _Relies on_
  + [[JIT/Types]]
  + [[Library]]
******** Types <<JIT/Types>>
- _Relies on_
  + [[INetIR/Types]]
  + [[Library]]
******* Net
******** API
- _Relies on_
  + [[Codegen]]
  + [[Net/EAC]]
  + [[Net/EAC/Types]]
  + [[Library]]
******** Environment <<Net/Environment>>
- Serves as the default environment for executing EAC code
- _Relies on_
  + [[Codegen]]
  + [[API]]
  + [[Net/EAC]]
  + [[Defs]]
  + [[MonadEnvironment]]
  + [[Net/EAC/Types]]
  + [[Library]]
  + [[HashMap]]
******** EAC <<Net/EAC>>
- =EAC= serves as the place where the interaction net rules for the
  EAC layer gets run
- The form given to =EAC= is not the base EAC AST, but instead a
  pre processed =EAC= graph that the initial graph will be made on
- _Allocation_
  + layout :
    eac{tag | NodePtr*[portSize | PortArray[portLocation | NodePtr]* | DataArray[Data]*]}
    * Similar to the one in Graph, however it also has the eac tag
   | Part         | Alloca Or Malloc                   |
   |--------------+------------------------------------|
   | eac          | Malloc                             |
   | tag          | Stored on Eac Malloc               |
   | NodePtr*     | Malloc from =mallocNode=           |
   | portSize     | Stored on Node Malloc              |
   | PortArray    | Malloc                             |
   | DataArray    | Malloc Maybe                       |
   | PortLocation | (Null) Allocad from PortArray Call |
   | NodePtr      | (Null) Allocad from PortArray Call |
   | Data         | (Null) Allocad from DataArray Call |
- Node Pointers are allocated at node creation time, so not the
  responsibility of the node to de-allocate, but instead uses the
  default strategy laid out in [[Codegen/Graph]]
- _Relies on_
  + [[Codegen]]
  + [[DSL]]
  + [[EAC/Debug]]
  + [[Defs]]
  + [[MonadEnvironment]]
  + [[Net/EAC/Types]]
  + [[Library]]
  + [[HashMap]]
********* Debug <<EAC/Debug>>
Serves as a module for various debugging functions
- _Relies on_
  + [[Codegen]]
********* Defs
- Specializes the functions in Graph to fit [[Net/EAC/Types]]
  + Later in the DSL Layer!
- Generates the =find_edge= and =isBothPrimary= function with the =eal= type.
- Also generates the proper types associated with them
- Also has some miscellaneous debug information
- _Relies on_
  + [[Codegen]]
  + [[DSL]]
  + [[Net/EAC/Types]]
  + [[Library]]
********* MonadEnvironment
- This serves as the monad in which all operations are run
- This is an extension of EACState
  + Sadly we can't extend types easily in Haskell, hence the
    boilerplate in this file
- _Relies on_
  + [[Codegen]]
  + [[Library]]
  + [[HashMap]]
********* Types <<Net/EAC/Types>>
- _Relies on_
  + [[Codegen]]
  + [[Library]]
*** test
**** LLVM <<test/LLVM>>
- _Relies on_
  + [[Codegen/Types]]
  + [[JIT]]
  + [[MonadEnvironment]]
  + [[Net/EAC/Types]]
  + [[Net/Environment]]
  + [[LLVM/Translation]]
  + [[Erased]]
  + [[Unit]]
  + [[Library]]
**** LLVM2
- _Relies on_
  + [[Codegen]]
  + [[JIT]]
  + [[Net/EAC]]
  + [[MonadEnvironment]]
  + [[Net/EAC/Types]]
  + [[Net/Environment]]
  + [[Library]]
  + [[HashMap]]
**** Main <<LLVM/test/Main>>
- _Relies on_
  + [[Library]]
** Michelson
*** Setup <<Michelson/Setup>>
*** src
**** Juvix
***** Backends
****** Michelson <<Backends/Michelson>>
- _Relies on_
  + [[Compilation]]
  + [[Michelson/Parameterisation]]
  + [[Michelson/Pipeline]]
******* Contract <<Michelson/Contract>>
This module provides a default contract environment
******* Optimisation
- This is a simple optimization strategy which replaces sequences of
  Michelson instructions with equivalent sequences of fewer
  instructions.
  + At the moment nontrivial programs are unlikely to compile to
    the smallest equivalent Michelson instruction sequence,
- but little time has been spent on optimization so far - a high
  degree should be possible; the Haskell typesystem provides very
  strong guarantees.
  + A more interesting / potentially more effective strategy might
    be to search the space of equivalent Michelson programs,
    which at small program sizes using bounded heuristic search
    should be computationally feasible -
    then choose the one with the fewest instructions (or based on
    some other gas-estimation preference function).
- _Relies on_
  + [[Compilation/Types]]
  + [[Library]]
******* Parameterisation <<Michelson/Parameterisation>>
Module that implements the backend parameters for the Michelson backend.
- _Relies on_
  + [[Compilation]]
  + [[Compilation/Types]]
  + [[Michelson/Contract]]
  + [[Instructions]]
  + [[InstructionsEff]]
  + [[Interpret]]
  + [[Untyped]]
  + [[Application]]
  + [[Prim]]
  + [[ErasedAnn/Types]]
  + [[IR/Evaluator]]
  + [[IR/Types/Base]]
  + [[Core/Parameterisation]]
  + [[Core/Types]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
  + [[Usage]]
******* Pipeline <<Michelson/Pipeline>>
- _Relies on_
  + [[Compilation]]
  + [[Michelson/Parameterisation]]
  + [[Core/IR]]
  + [[Core/Pipeline]]
  + [[Library]]
  + [[Feedback]]
  + [[Juvix/Pipeline]]
  + [[FromFrontend]]
******* Compilation
- Entrypoints into compilation from core terms to Michelson terms & contracts.
- _Relies on_
  + [[Compilation/Types]]
  + [[VirtualStack]]
  + [[DSL/Environment]]
  + [[Instructions]]
  + [[InstructionsEff]]
  + [[Untyped]]
  + [[Optimisation]]
  + [[ErasedAnn/Types]]
  + [[Library]]
******** Types <<Compilation/Types>>
- Types used internally by the Michelson backend.
- _Relies on_
  + [[Application]]
  + [[ErasedAnn/Types]]
  + [[IR/Types]]
  + [[Core/Parameterisation]]
  + [[Library]]
  + [[NameSymbol]]
******** VirtualStack
- Serves as a virtual stack over Michelson
- This stack has a few properties
  + The values on this stack may or may not be on the real
    stack. However for convention this should be largely ignored,
    except when you wish to do an operation like pair
    * This can be fixed in the future
    * Until then, one should filter out the virtual stack items
- We keep virtual items on the ="stack"= as that makes the details
  on whether something is constant propagation or not act
  consistently with each other.
  + After all, what may not be a constant now, may be in the
    future, or vice versa!
- Import with qualified and the name of =VStack=
- _Relies on_
  + [[Compilation/Types]]
  + [[Instructions]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
  + [[Usage]]
******* DSL
******** Contract <<DSL/Contract>>
- _Relies on_
  + [[Library]]
******** Environment <<DSL/Environment>>
- _Relies on_
  + [[Compilation/Types]]
  + [[VirtualStack]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
******** Instructions
- This module serves as a lower layer DSL that is just a binding
  over the untyped instruction bindings
- _Relies on_
  + [[Compilation/Types]]
  + [[Untyped]]
  + [[Library]]
******** InstructionsEff
- This module includes a higher level DSL which each instruction
  has a stack effect
  + This is similar to the base LLVM bindings we have.
  + So for example, emitting an =add=, eats two items from the
    virtual stack, and adds an =Instr.Add= instruction to the
    sequence of instructions to execute
- For constant progoation, have a function say take-2 that looks at
  the top two items in the stack and then returns back either if
  they were constants or not and dispatches logic based on that
- _Relies on_
  + [[Compilation/Types]]
  + [[VirtualStack]]
  + [[DSL/Environment]]
  + [[Instructions]]
  + [[Untyped]]
  + [[Utils]]
  + [[ErasedAnn/Types]]
  + [[Library]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
******** Interpret
- _Relies on_
  + [[Compilation/Types]]
  + [[DSL/Contract]]
  + [[Library]]
******** Untyped
- _Relies on_
  + [[Library]]
******** Utils
- _Relies on_
  + [[Instructions]]
  + [[Untyped]]
  + [[ErasedAnn/Types]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
*** test
**** Main <<Michelson/test/Main>>
- _Relies on_
  + [[Library]]
**** Michelson <<test/Michelson>>
- _Relies on_
  + [[Compilation]]
  + [[Compilation/Types]]
  + [[DSL/Environment]]
  + [[Instructions]]
  + [[Interpret]]
  + [[Untyped]]
  + [[Optimisation]]
  + [[ErasedAnn]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
**** VStack
- _Relies on_
  + [[Compilation/Types]]
  + [[VirtualStack]]
  + [[Untyped]]
  + [[Library]]
  + [[Usage]]
** Plonk
*** Setup <<Plonk/Setup>>
*** src
**** Juvix
***** Backends
****** Plonk
- _Relies on_
  + [[Builder]]
  + [[Circuit]]
  + [[Assignment]]
  + [[Plonk/Compiler]]
  + [[Plonk/Dot]]
  + [[Plonk/IR]]
  + [[Lang]]
  + [[Parameterization]]
  + [[Plonk/Pipeline]]
  + [[Plonk/Types]]
******* Builder
- _Relies on_
  + [[Circuit]]
  + [[Plonk/IR]]
  + [[Library]]
******* Compiler <<Plonk/Compiler>>
- _Relies on_
  + [[Builder]]
  + [[Circuit]]
  + [[Plonk/IR]]
  + [[Plonk/Types]]
  + [[ErasedAnn/Types]]
  + [[Library]]
  + [[NameSymbol]]
******* Dot <<Plonk/Dot>>
Visualise circuits using Graphviz
- _Relies on_
  + [[Circuit]]
  + [[Library]]
******* IR <<Plonk/IR>>
- _Relies on_
  + [[Circuit]]
  + [[Library]]
******* Lang
Surface language
- _Relies on_
  + [[Builder]]
  + [[Circuit]]
  + [[Plonk/IR]]
  + [[Library]]
******* Parameterization
- _Relies on_
  + [[Plonk/Types]]
  + [[Application]]
  + [[ErasedAnn/Types]]
  + [[IR/Evaluator]]
  + [[IR/Types/Base]]
  + [[Core/Parameterisation]]
  + [[Core/Types]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
  + [[Usage]]
******* Pipeline <<Plonk/Pipeline>>
- _Relies on_
  + [[Builder]]
  + [[Circuit]]
  + [[Plonk/Compiler]]
  + [[Plonk/Dot]]
  + [[Parameterization]]
  + [[Plonk/Types]]
  + [[Application]]
  + [[Core/IR]]
  + [[OnlyExts]]
  + [[Typechecker/Types]]
  + [[Core/Parameterisation]]
  + [[Core/Pipeline]]
  + [[Library]]
  + [[Feedback]]
  + [[Juvix/Pipeline]]
  + [[FromFrontend]]
******* Types <<Plonk/Types>>
- _Relies on_
  + [[Application]]
  + [[ErasedAnn]]
  + [[ErasedAnn/Types]]
  + [[IR/Types]]
  + [[Core/Parameterisation]]
  + [[Library]]
******* Circuit
- _Relies on_
  + [[Library]]
******** Assignment
- _Relies on_
  + [[Circuit]]
  + [[Library]]
*** test
**** Main <<Plonk/test/Main>>
- _Relies on_
  + [[Library]]
**** Test
***** AnnTerm
- _Relies on_
  + [[Plonk]]
  + [[Plonk]]
  + [[ErasedAnn]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
***** Compiler <<Test/Compiler>>
- _Relies on_
  + [[Plonk]]
  + [[Plonk]]
  + [[Core]]
  + [[Library]]
  + [[Library]]
  + [[Feedback]]
  + [[Juvix/Pipeline]]
***** Example
****** Polynomial
- _Relies on_
  + [[Plonk]]
  + [[Plonk]]
  + [[ErasedAnn]]
  + [[Library]]
  + [[Usage]]
* Core
** Setup <<Core/Setup>>
** src
*** Juvix
**** Core
***** Application
Types to support partial application and polymorphic primitives.
- _Relies on_
  + [[IR/Types]]
  + [[Library]]
  + [[Usage]]
***** Parameterisation <<Core/Parameterisation>>
Juvix parameterises the type theory & core language over a set of
primitive data types and primitive values, which can include native data
types such as strings, integers, or sets, and native functions such as
addition, subtraction, string concatenation, set membership, etc. The
language & typechecker can then be instantiated over a particular backend
which provides concrete sets of primitives and a primitive type-checking
relation.
- _Relies on_
  + [[Application]]
  + [[IR/Types]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
***** Translate
- _Relies on_
  + [[HR]]
  + [[Core/IR]]
  + [[Utility]]
  + [[Library]]
  + [[NameSymbol]]
***** Types <<Core/Types>>
- _Relies on_
  + [[Erased]]
  + [[Erasure/Types]]
  + [[HR/Types]]
  + [[IR/Typechecker]]
  + [[IR/Types]]
  + [[Core/Parameterisation]]
  + [[Library]]
***** Utility
- _Relies on_
  + [[Library]]
  + [[NameSymbol]]
***** Common
****** Closure
Closure.T serves as the data structure in which we will store
temporary lexical bindings as our code encounters binders.
- _Relies on_
  + [[Core/Common/Context]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
****** NameSpace
- _Relies on_
  + [[Library]]
  + [[HashMap]]
****** Open
- _Relies on_
  + [[Library]]
****** Context <<Core/Common/Context>>
- Serves as the context for lower level programs of the =Juvix=
  Programming Language
- This is parameterized per phase which may store the type and
  term in slightly different ways
- _Relies on_
  + [[Precedence]]
  + [[Context/Types]]
  + [[NameSpace]]
  + [[Library]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
******* Precedence
- _Relies on_
  + [[Library]]
******* Types <<Context/Types>>
- _Relies on_
  + [[Precedence]]
  + [[NameSpace]]
  + [[Open]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
  + [[Usage]]
***** Erased
- _Relies on_
  + [[Erased/Evaluator]]
  + [[Erased/Types]]
  + [[Util]]
****** Evaluator <<Erased/Evaluator>>
- _Relies on_
  + [[Erased/Types]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
****** Extend <<Erased/Extend>>
- _Relies on_
  + [[HRAnn/Extend]]
  + [[IR/Types/Base]]
****** Util
- _Relies on_
  + [[Erased/Types]]
  + [[Library]]
  + [[NameSymbol]]
****** Types <<Erased/Types>>
- _Relies on_
  + [[Erased/Types/Base]]
  + [[Typechecker/Types]]
  + [[IR/Types/Base]]
  + [[Globals]]
  + [[Library]]
******* Base <<Erased/Types/Base>>
- _Relies on_
  + [[IR/Types]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
  + [[Usage]]
***** ErasedAnn
- _Relies on_
  + [[Conversion]]
  + [[ErasedAnn/Types]]
****** Conversion
- _Relies on_
  + [[Erased]]
  + [[ErasedAnn/Types]]
  + [[Erasure/Types]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
****** Erasure <<ErasedAnn/Erasure>>
- _Relies on_
  + [[Erased/Types]]
  + [[ErasedAnn/Types]]
  + [[ErasedAnn/Types]]
  + [[Library]]
****** Prim
- _Relies on_
  + [[Application]]
  + [[ErasedAnn/Types]]
  + [[Core/Parameterisation]]
  + [[Library]]
  + [[Usage]]
****** Types <<ErasedAnn/Types>>
- _Relies on_
  + [[Application]]
  + [[IR/Types]]
  + [[Core/Parameterisation]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
***** Erasure <<Core/Erasure>>
- _Relies on_
  + [[Algorithm]]
  + [[Erasure/Types]]
****** Algorithm
- _Relies on_
  + [[Erasure/Types]]
  + [[Erasure/Types]]
  + [[Core/IR]]
  + [[Typechecker/Types]]
  + [[IR/Types/Base]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
****** Types <<Erasure/Types>>
- _Relies on_
  + [[Erased/Types]]
  + [[Erased/Types]]
  + [[Erased/Types/Base]]
  + [[Typechecker/Types]]
  + [[IR/Types]]
  + [[IR/Types]]
  + [[Core/Parameterisation]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
***** HR
- _Relies on_
  + [[HR/Types]]
****** Extend <<HR/Extend>>
- _Relies on_
  + [[IR/Types/Base]]
  + [[Library]]
  + [[NameSymbol]]
****** Subst <<HR/Subst>>
- Runs a substitution algorithm over core
- _Relies on_
  + [[HR/Types]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
  + [[Usage]]
****** Types <<HR/Types>>
- _Relies on_
  + [[HR/Extend]]
  + [[IR/Types/Base]]
***** HRAnn
- _Relies on_
  + [[HRAnn/Erasure]]
  + [[HRAnn/Types]]
****** Erasure <<HRAnn/Erasure>>
- _Relies on_
  + [[HR/Types]]
  + [[HRAnn/Types]]
  + [[TransformExt]]
  + [[Library]]
****** Extend <<HRAnn/Extend>>
- _Relies on_
  + [[IR/Types/Base]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
****** Types <<HRAnn/Types>>
- _Relies on_
  + [[HRAnn/Extend]]
  + [[IR/Types/Base]]
***** IR <<Core/IR>>
- _Relies on_
  + [[CheckTerm]]
  + [[IR/Evaluator]]
  + [[IR/Typechecker]]
  + [[IR/Typechecker]]
  + [[IR/Types]]
  + [[Library]]
****** CheckTerm
This file contains the functions and aux functions to typecheck terms.
@typeTerm@ and @typeElim@ are called by functions for typechecking
datatype and function declarations.
- _Relies on_
  + [[Application]]
  + [[IR/Evaluator]]
  + [[Typechecker/Env]]
  + [[Typechecker/Types]]
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Core/Parameterisation]]
  + [[Library]]
  + [[Usage]]
****** Evaluator <<IR/Evaluator>>
This includes the evaluators (evalTerm and evalElim),
the value application function (vapp) and
the substitution functions (substTerm and substElim).
- _Relies on_
  + [[PatSubst]]
  + [[Evaluator/Subst]]
  + [[SubstV]]
  + [[Evaluator/Types]]
  + [[Evaluator/Weak]]
  + [[TransformExt]]
  + [[OnlyExts]]
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Core/Parameterisation]]
  + [[Library]]
  + [[Usage]]
******* PatSubst
- _Relies on_
  + [[Application]]
  + [[Evaluator/Weak]]
  + [[OnlyExts]]
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Core/Parameterisation]]
  + [[Library]]
  + [[Usage]]
******* Subst <<Evaluator/Subst>>
- _Relies on_
  + [[Application]]
  + [[Evaluator/Weak]]
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Library]]
  + [[Usage]]
******* SubstV
- _Relies on_
  + [[Application]]
  + [[Evaluator/Types]]
  + [[Evaluator/Weak]]
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Core/Parameterisation]]
  + [[Library]]
  + [[Usage]]
******* Types <<Evaluator/Types>>
- _Relies on_
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Core/Parameterisation]]
  + [[Library]]
******* Weak <<Evaluator/Weak>>
- _Relies on_
  + [[Application]]
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Library]]
  + [[Usage]]
****** TransformExt
Transformations between different extensions.
- _Relies on_
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Library]]
******* OnlyExts
A transformation that discards all annotations on term/elim nodes, but
keeps the extensions.
- _Relies on_
  + [[TransformExt]]
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Library]]
****** Typechecker <<IR/Typechecker>>
This file contains the functions and aux functions to typecheck
datatype and function declarations.
Datatype declarations are typechecked by @checkDataType@ in CheckDataType.hs.
Function declarations are typechecked by @typeCheckFuns@ in CheckFunction.hs.
Typechecked declarations are added to the signature.
- _Relies on_
  + [[Typechecker/Env]]
  + [[Typechecker/Types]]
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Globals]]
  + [[Library]]
******* Env <<Typechecker/Env>>
- _Relies on_
  + [[IR/Evaluator]]
  + [[OnlyExts]]
  + [[Typechecker/Types]]
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Globals]]
  + [[Core/Parameterisation]]
  + [[Library]]
  + [[Usage]]
******* Types <<Typechecker/Types>>
- _Relies on_
  + [[Application]]
  + [[IR/Evaluator]]
  + [[IR/Types]]
  + [[IR/Types/Base]]
  + [[Globals]]
  + [[Core/Parameterisation]]
  + [[Library]]
  + [[Usage]]
****** Types <<IR/Types>>
Quantitative type implementation inspired by
  Atkey 2018 and McBride 2016.
- _Relies on_
  + [[IR/Types/Base]]
  + [[Globals]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
******* Base <<IR/Types/Base>>
- _Relies on_
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
******* Globals
- _Relies on_
  + [[IR/Types/Base]]
  + [[Library]]
  + [[HashMap]]
  + [[Usage]]
***** IRAnn
- _Relies on_
  + [[IRAnn/Erasure]]
  + [[IRAnn/Types]]
****** Erasure <<IRAnn/Erasure>>
- _Relies on_
  + [[TransformExt]]
  + [[IR/Types]]
  + [[IRAnn/Types]]
****** Types <<IRAnn/Types>>
- _Relies on_
  + [[IR/Types/Base]]
  + [[Library]]
  + [[Usage]]
***** Parameterisations
****** All
- _Relies on_
  + [[Application]]
  + [[IR/Evaluator]]
  + [[IR/Types/Base]]
  + [[Core/Parameterisation]]
  + [[Naturals]]
  + [[Unit]]
  + [[Library]]
****** Naturals
- _Relies on_
  + [[Application]]
  + [[IR/Evaluator]]
  + [[Typechecker/Types]]
  + [[IR/Types/Base]]
  + [[Core/Parameterisation]]
  + [[Library]]
****** Unit
- _Relies on_
  + [[IR/Evaluator]]
  + [[IR/Types/Base]]
  + [[Core/Parameterisation]]
  + [[Library]]
** test
*** Conv
- _Relies on_
  + [[HR]]
  + [[Core/IR]]
  + [[Translate]]
  + [[Library]]
*** Erasure <<test/Erasure>>
- _Relies on_
  + [[Application]]
  + [[Erased]]
  + [[Core/Erasure]]
  + [[Core/IR]]
  + [[IR/Typechecker]]
  + [[Unit]]
  + [[Core/Types]]
  + [[Library]]
  + [[Usage]]
*** Main <<Core/test/Main>>
- _Relies on_
  + [[Library]]
*** Typechecker <<test/Typechecker>>
Tests for the type checker and evaluator in Core/IR/Typechecker.hs
- _Relies on_
  + [[Core/IR]]
  + [[CheckTerm]]
  + [[IR/Evaluator]]
  + [[OnlyExts]]
  + [[IR/Typechecker]]
  + [[All]]
  + [[Naturals]]
  + [[Unit]]
  + [[Core/Types]]
  + [[Library]]
  + [[HashMap]]
  + [[Usage]]
*** Common
**** Context <<test/Common/Context>>
- _Relies on_
  + [[Core/Common/Context]]
  + [[NameSpace]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
*** IR
**** Weak <<IR/Weak>>
Tests that weak works as expected
- _Relies on_
  + [[IR/Evaluator]]
  + [[IR/Types]]
  + [[Library]]
* EasyPipeline
** Setup <<EasyPipeline/Setup>>
** src
*** Easy
The easy module serves as the stop shop for getting anywhere in the
code-base fast.
_The file is laid out where_
 1. we lay out a phase
    - We have 2 variants of each phase
      1) <name>File
      2) <name>Library
    - This lasts up until context, as we can see if the prelude we
      give it matches our expectations
 2. We then give examples
We do 1. and 2. having each step rely on the last, and continue the
process until the compiler is at the full backends.
We can view this approach as giving us a quick way to play around
with any stage of the compiler while modifying the source code.
- _Relies on_
  + [[Michelson/Parameterisation]]
  + [[Juvix/Contextify]]
  + [[ResolveOpenInfo]]
  + [[ToContext/Types]]
  + [[Core]]
  + [[Core/Common/Context]]
  + [[Traverse]]
  + [[Desugar]]
  + [[Frontend]]
  + [[Frontend/Parser]]
  + [[Frontend/Sexp]]
  + [[Frontend/Types]]
  + [[Frontend/Types]]
  + [[Frontend/Types/Base]]
  + [[FrontendDesugar]]
  + [[Library]]
  + [[Feedback]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
  + [[Juvix/Pipeline]]
  + [[Compile]]
** test
*** Spec <<EasyPipeline/test/Spec>>
* Frontend
** Setup <<Frontend/Setup>>
** src
*** Juvix
**** Frontend
- _Relies on_
  + [[Frontend/Parser]]
  + [[Frontend/Types]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Parser]]
***** Parser <<Frontend/Parser>>
- The front end parser for the Juvix Programming language
- Parsers with S at the end, eat the spaces at the end of the parse
- Parsers with SN at the end, eats the spaces and new lines at the
  end of the parse
- _Relies on_
  + [[Frontend/Types]]
  + [[Library]]
  + [[Library/Parser]]
  + [[Library/Parser]]
***** Sexp <<Frontend/Sexp>>
- _Relies on_
  + [[Frontend/Types/Base]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
***** Types <<Frontend/Types>>
- This file defines the main ADT for the Juvix front end language.
- This ADT corresponds to the bnf laid out [[https://github.com/cryptiumlabs/juvix/blob/develop/doc/Frontend/syntax.org][here]].
- Later a trees that grow version of this will be implemented, so
  infix functions can better transition across syntax
- Note :: The names for the types in =ArrowData= are stored in the
          =ArrowGen= and not in =NamedType=
- _Relies on_
  + [[Frontend/Types/Base]]
****** Base <<Frontend/Types/Base>>
- This file defines the main ADT for the Juvix front end language.
- This ADT corresponds to the bnf laid out [[https://github.com/cryptiumlabs/juvix/blob/develop/doc/Frontend/syntax.org][here]].
- Later a trees that grow version of this will be implemented, so
  infix functions can better transition across syntax
- Note :: The names for the types in =ArrowData= are stored in the
          =ArrowGen= and not in =NamedType=
- _Relies on_
  + [[Library]]
  + [[Usage]]
****** Located
- _Relies on_
  + [[Library]]
  + [[Library/Parser]]
** test
*** Main <<Frontend/test/Main>>
- _Relies on_
  + [[Library]]
*** Parser <<test/Parser>>
- _Relies on_
  + [[Frontend/Parser]]
  + [[Frontend/Parser]]
  + [[Frontend/Types]]
  + [[Frontend/Types]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Parser]]
  + [[Library/Parser]]
*** Sexp <<Frontend/test/Sexp>>
- _Relies on_
  + [[Frontend/Parser]]
  + [[Frontend/Sexp]]
  + [[Frontend/Types]]
  + [[Library]]
  + [[Library/Sexp]]
* InteractionNet
** Setup <<InteractionNet/Setup>>
** src
*** Juvix
**** INetIR
- _Relies on_
  + [[JSON]]
  + [[INetIR/Types]]
***** JSON
- _Relies on_
  + [[Library]]
***** Types <<INetIR/Types>>
- _Relies on_
  + [[Library]]
**** Interpreter
- Although slower than [[Backends]], the interpreter serves as a
  reference point to play, modify, and debug features that will go
  in the various compiler backends
***** InteractionNet
- _Relies on_
  + [[Erased/Types]]
  + [[InteractionNet/Default]]
  + [[InteractionNet/Parser]]
  + [[InteractionNet/Translation]]
  + [[Type]]
****** Default <<InteractionNet/Default>>
Gives the default execution environment for netToAst
Can be added to via core translation
- _Relies on_
  + [[InteractionNet/Shared]]
  + [[Type]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
****** NodeInterface
- Serves as a generic lens layer for various Node types in interaction nets
  1. Primary port details
     - Open or Bound?
  2. Auxiliary port details
     - Open or Bound?
  3. Type Classes aliases for having just a Primary port, or an
     Auxiliary port and a Primary, or two Auxiliary ports and a
     primary, and so forth.
- _Relies on_
  + [[Library]]
****** Parser <<InteractionNet/Parser>>
- Parses the syntax according to the formal =BNF=
- _Relies on_
  + [[InteractionNet/Default]]
  + [[InteractionNet/Shared]]
  + [[Type]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
****** Shared <<InteractionNet/Shared>>
- _Relies on_
  + [[Library]]
****** Translation <<InteractionNet/Translation>>
- Translates the default abstract syntax into Interaction nets
  + Also translates the net into the an ast
- _Relies on_
  + [[Core/Types]]
  + [[Interface]]
  + [[InteractionNet/Nets/Default]]
  + [[NodeInterface]]
  + [[InteractionNet/Shared]]
  + [[Type]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
****** Type
- Serves as the AST for all operations on [[Nets/Default]]
- Resembles the =BOHM= syntax/operation set, however it alters the
  operation set quite a bit
  + _Added_
    1. Notion of some kind of primitive value
    2. Curry 1-3
       - This allows custom functions to be manifested on primitive
         values
  + _Removed_
    1. =Letrec=
       - While here, it isn't fully implemented
    2. Hard coded math operations
       - This has been moved to primitive value operations
- _Relies on_
  + [[InteractionNet/Shared]]
  + [[Library]]
  + [[NameSymbol]]
****** Backends
******* Env <<Backends/Env>>
- Env serves as the environment for running the back-ends
  + This includes the diagnostic information about how the code is ran
  + Also includes the effect handler types and the runner functions
    for them
- Also gives functions needed to increment diagnostic information
  + see =incGraphStepSize= and =sequentalStep=
  + File will also be imported in [[Nets]] due to these two functions
- _Relies on_
  + [[Interface]]
  + [[Library]]
******* Graph <<Backends/Graph>>
- This is an implementation of said interfacing using =FGL=
- This code will imported in Tests as a possible back-end for testing.
  + This back-end is more useful than [[Maps]] as it can produce
    graphical outputs, see [[Visualize]]
- _Relies on_
  + [[Backends/Env]]
  + [[Interface]]
  + [[NodeInterface]]
  + [[Library]]
******* Interface
- Interface serves as a file that has common types between the various
  back ends along with two interfaces each back-end must support
  + This also includes functions derived from the interface functions!
- This file will be the file [[Nets]] will import as it provides the
  interface along with derived functions
- _Relies on_
  + [[NodeInterface]]
  + [[Library]]
******* Maps
- this is an implementation of said interface using the =EnumMap= data structure
- This code will be imported in Tests as a possible back-end for testing
- _Relies on_
  + [[Backends/Env]]
  + [[Interface]]
  + [[NodeInterface]]
  + [[Library]]
****** Nets
******* Combinators <<InteractionNet/Nets/Combinators>>
- An evaluation for a simple combination calculus language, only has
  three ports
  1. Con
  2. Dup
  3. Era
- _Relies on_
  + [[Backends/Env]]
  + [[Interface]]
  + [[NodeInterface]]
  + [[Library]]
******* Default <<InteractionNet/Nets/Default>>
- An evaluator for the Default Language
- Serves as a reference way of creating interaction nets
- _Relies on_
  + [[Backends/Env]]
  + [[Interface]]
  + [[NodeInterface]]
  + [[InteractionNet/Shared]]
  + [[Library]]
  + [[NameSymbol]]
**** Visualize
***** Dot <<Visualize/Dot>>
- Generates a dot file in order to produce a simple image of a
  interaction net
- Also provides a way of generating gifs (and the images used to
  generate said gif), displaying every reduction step until the term
  is normalized
- _Relies on_
  + [[Backends/Env]]
  + [[Backends/Graph]]
  + [[InteractionNet/Nets/Default]]
  + [[Library]]
  + [[Visualize/Graph]]
***** Graph <<Visualize/Graph>>
- A simple function for showing the graph as a proper net
- Really should be improved upon or removed
- _Relies on_
  + [[Library]]
** test
*** INet
- _Relies on_
  + [[Core/EAC]]
  + [[Unit]]
  + [[InteractionNet]]
  + [[Backends/Env]]
  + [[Backends/Graph]]
  + [[Interface]]
  + [[Maps]]
  + [[InteractionNet/Nets/Default]]
  + [[Type]]
  + [[Library]]
  + [[Visualize/Dot]]
  + [[Visualize/Graph]]
*** Spec <<InteractionNet/test/Spec>>
*** Nets
**** Combinators <<test/Nets/Combinators>>
- _Relies on_
  + [[Backends/Env]]
  + [[Backends/Graph]]
  + [[Interface]]
  + [[InteractionNet/Nets/Combinators]]
  + [[Library]]
**** Default <<test/Nets/Default>>
- _Relies on_
  + [[Backends/Env]]
  + [[Backends/Graph]]
  + [[Interface]]
  + [[InteractionNet/Nets/Default]]
  + [[Library]]
* InteractionNetIR
** Setup <<InteractionNetIR/Setup>>
** src
*** Juvix
**** Core
***** EAC <<Core/EAC>>
- This directory contains the implementation of =Eal= and the inferred
  bracket checker on =Eal=
- _Relies on_
  + [[Check]]
  + [[ConstraintGen]]
  + [[EAC/Erasure]]
  + [[EAC/Parser]]
  + [[Solve]]
  + [[Core/EAC/Types]]
****** Check
- A constraint checker for EAC.
- _Relies on_
  + [[ConstraintGen]]
  + [[Solve]]
  + [[Core/EAC/Types]]
  + [[Core/Types]]
  + [[Library]]
****** ConstraintGen
- _Relies on_
  + [[Core/EAC/Types]]
  + [[Erased/Types]]
  + [[Core/Types]]
  + [[Library]]
  + [[HashMap]]
****** Erasure <<EAC/Erasure>>
- _Relies on_
  + [[Core/EAC/Types]]
  + [[Erased/Types]]
****** Parser <<EAC/Parser>>
- _Relies on_
  + [[Core/EAC/Types]]
  + [[Core/EAC/Types]]
  + [[Unit]]
  + [[Library]]
  + [[NameSymbol]]
****** Solve
- A Z3 solver for the generated =Eal= Constraints
- Can generate multiple constraints that will be used along side the
  Bracket checker to confirm that the solved constraints Z3 gives us
  is correct
- _Relies on_
  + [[Core/EAC/Types]]
  + [[Library]]
****** Types <<Core/EAC/Types>>
- _Relies on_
  + [[Erased/Types]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
** test
*** EAC <<test/EAC>>
- _Relies on_
  + [[Core/EAC]]
  + [[Unit]]
  + [[Library]]
*** EAC2
- _Relies on_
  + [[Core/EAC]]
  + [[Check]]
  + [[Erased/Types]]
  + [[Erased/Types]]
  + [[Core/Types]]
  + [[Library]]
  + [[HashMap]]
  + [[Usage]]
*** Main <<InteractionNetIR/test/Main>>
- _Relies on_
  + [[Library]]
* Pipeline
** Setup <<Pipeline/Setup>>
** src
*** Juvix
**** Core
- _Relies on_
  + [[Juvix/Contextify]]
  + [[Core/Common/Context]]
  + [[Core/Erasure]]
  + [[Core/Pipeline]]
  + [[Translate]]
  + [[Core/Types]]
  + [[Frontend/Types]]
  + [[FrontendDesugar]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
***** Pipeline <<Core/Pipeline>>
- _Relies on_
  + [[Application]]
  + [[ErasedAnn]]
  + [[Prim]]
  + [[Core/Erasure]]
  + [[HR]]
  + [[Core/IR]]
  + [[IR/Typechecker]]
  + [[Translate]]
  + [[Core/Types]]
  + [[Library]]
  + [[Usage]]
**** Encoding
***** Encoding <<Encoding/Encoding>>
- This provides generic functions used by the various encodings in
  this directory
- _Relies on_
  + [[Encoding/Types]]
  + [[Library]]
  + [[HashMap]]
***** Mendler
- Gives a =Mendler= encoding from an =ADT=.
- This file is not done as Ι have yet to find a way to convert any
  general recursive function into a proper =Mendler= form.
- This however will do the boilerplate of changing an =ADT= to
  =Mendler= and the structure of a case expression into proper
  =Mendler= form
- _Relies on_
  + [[Encoding/Encoding]]
  + [[Encoding/Types]]
  + [[Library]]
  + [[HashMap]]
***** Scott
- Gives a =Scott= encoding from an =ADT= and works properly for case
  expressions
- Overall this encoding just works™
- _Relies on_
  + [[Encoding/Encoding]]
  + [[Encoding/Types]]
  + [[Library]]
  + [[HashMap]]
***** Types <<Encoding/Types>>
- _Relies on_
  + [[Library]]
  + [[HashMap]]
**** Pipeline <<Juvix/Pipeline>>
- _Relies on_
  + [[Application]]
  + [[Core/Common/Context]]
  + [[ErasedAnn]]
  + [[Library]]
  + [[Feedback]]
  + [[Library/Sexp]]
  + [[Compile]]
  + [[Pipeline/Internal]]
  + [[Pipeline/Internal]]
  + [[Pipeline/Types]]
***** Compile
- _Relies on_
  + [[Application]]
  + [[Core/IR]]
  + [[IR/Types/Base]]
  + [[Globals]]
  + [[Library]]
  + [[Feedback]]
  + [[ToCore/Types]]
***** Internal <<Pipeline/Internal>>
- _Relies on_
  + [[Core]]
  + [[Core/Common/Context]]
  + [[Traverse]]
  + [[IR/Types]]
  + [[Core/Parameterisation]]
  + [[Frontend]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Parser]]
  + [[Library/Sexp]]
  + [[FromFrontend]]
***** Types <<Pipeline/Types>>
- _Relies on_
  + [[ErasedAnn/Types]]
  + [[Erasure/Types]]
  + [[Typechecker/Types]]
  + [[Core/Types]]
  + [[Library]]
** test
*** Main <<Pipeline/test/Main>>
- _Relies on_
  + [[Library]]
*** Test
**** Encoding <<Test/Encoding>>
- _Relies on_
  + [[Encoding/Encoding]]
  + [[Mendler]]
  + [[Scott]]
  + [[Encoding/Types]]
  + [[Library]]
**** Pipeline <<Test/Pipeline>>
- _Relies on_
  + [[Backends/Michelson]]
  + [[Compilation]]
  + [[Core/IR]]
  + [[Core/Pipeline]]
  + [[Core/Types]]
  + [[Library]]
  + [[Usage]]
**** RecGroups
- _Relies on_
  + [[Traverse]]
  + [[Library]]
  + [[Juvix/Pipeline]]
* StandardLibrary
** Setup <<StandardLibrary/Setup>>
** src
*** Juvix
**** Library
- The standard Library for the project
  + Thus all code will depend on this module without stating otherwise
- Is mostly =Protolude= except with a few changes
  + _Additions_
    * ∨   :: Serves as an or function
    * ∧   :: Serves as an and function
    * |<< :: Serves as a map function
    * >>| :: Serves as the flip map function
  + _Changes_
    * The Capability library is imported and replaces the standard =MTL=
      constructs in =Protolude=
- _Relies on_
  + [[PrettyPrint]]
***** Feedback
- _Relies on_
  + [[Library]]
***** HashMap
- The HashMap for the codebase.
- Basically just imports Data.HashMap.Strict
  + While giving the operation =!?=.
- Every hash in the code base should use this, except when it needs
  to compare keys by the =Ordering= metric instead.
***** LineNum
- _Relies on_
  + [[Library]]
***** NameSymbol
- _Relies on_
  + [[Library]]
  + [[Token]]
***** PrettyPrint
***** Usage
- _Relies on_
  + [[Library]]
***** Parser <<Library/Parser>>
- _Relies on_
  + [[Parser/Internal]]
  + [[Lexer]]
  + [[Token]]
****** Internal <<Parser/Internal>>
****** Lexer
- _Relies on_
  + [[Library]]
  + [[Parser/Internal]]
  + [[Token]]
****** Token
- _Relies on_
  + [[Library]]
***** Sexp <<Library/Sexp>>
This module serves as the main sexpression import it contains the
sexp type and all the various helper functionality one can need
- _Relies on_
  + [[Library]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Sexp/Parser]]
  + [[Sexp/Types]]
****** Parser <<Library/Sexp/Parser>>
- _Relies on_
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Parser]]
  + [[Parser/Internal]]
  + [[Sexp/Types]]
****** Types <<Sexp/Types>>
- _Relies on_
  + [[Library]]
  + [[LineNum]]
  + [[NameSymbol]]
** test
*** Main <<StandardLibrary/test/Main>>
- _Relies on_
  + [[Library]]
*** NameSymb
- _Relies on_
  + [[Library]]
  + [[NameSymbol]]
*** Sexp <<StandardLibrary/test/Sexp>>
- _Relies on_
  + [[Library]]
  + [[Library/Sexp]]
**** Parser <<test/Sexp/Parser>>
- _Relies on_
  + [[Library]]
  + [[Library/Sexp]]
**** SimplifiedPasses
- _Relies on_
  + [[Library]]
  + [[Library/Sexp]]
* Translate
** Setup <<Translate/Setup>>
** src
*** Juvix
**** FreeVars
TODO ∷ determine what has changed in the rebasing of this algo
- FreeVars is an algorithm that checks for free symbols in the AST.
- The =ExcludedSet= holds the symbols defined... These are needed
  in case of a degenerate case like
  #+BEGIN_SRC ocaml
    let foo =
      let type point = {x : int, y : int} in
      let our-point  = {x = 3, y = 4} in
      our-point.x + our-point.y
  #+END_SRC
  + here we need to dismiss =our-point.x= and =our-point.y=, just
    filtering out =our-point= isn't enough! we have to check if the
    first-part of the name has =our-point=, since everything shares
    the same namespace
- TODO :: How do we handle this case?
  #+BEGIN_SRC ocaml
    mod Foo where
    let foo (x :: xs) = x + TopLevel.Foo.foo xs
    let foo []        = 0
  #+END_SRC
  + To Handle this, we need to unqualify the foo, and have the
    module handle the symbol allocation
- NOTE :: we assume in =nameifyAdt= which takes effect in the =\\=
  call to =nameifyLetType=, that definitions of constructors before
  this point can't be redefined
  + This means that if we have ordered definitions, we'll silently
    drop the calls to the old constructors.
  + Thus, please redefine the logic there to support such modes
- _Reasons to update_
  1. let's not being recursive
     - we assume lets are recursive, if this changes the code
       has to be updated to account for that'
  2. Language becomes ordered
     - see first note above
  3. Universe or Declaration talk about free variables
     - currently universe is unfinished, and are not
       first class
|
- FreeVars is an algorithm that checks for free symbols in the AST.
- The =ExcludedSet= holds the symbols defined... These are needed
  in case of a degenerate case like
  #+BEGIN_SRC ocaml
    let foo =
      let type point = {x : int, y : int} in
      let our-point  = {x = 3, y = 4} in
      our-point.x + our-point.y
  #+END_SRC
  + here we need to dismiss =our-point.x= and =our-point.y=, just
- _Relies on_
  + [[Contextify/Environment]]
  + [[Closure]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
**** FrontendDesugar
- Order of Passes
  1. =RemoveModule=
  2. =RemoveGuard=
  3. =RemoveCond=
  4. =CombineMultiple=
  5. =RemoveSignature=
  6. =RemovePunned=
  7. =RemoveDo=
- _Relies on_
  + [[Desugar]]
  + [[Frontend/Sexp]]
  + [[Frontend/Types]]
  + [[Library]]
  + [[Library/Sexp]]
**** Contextify <<Juvix/Contextify>>
- _Relies on_
  + [[Contextify/Environment]]
  + [[Contextify/Passes]]
  + [[ResolveOpenInfo]]
  + [[ToContext/Sexp]]
  + [[ToContext/Types]]
  + [[Core/Common/Context]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
***** Environment <<Contextify/Environment>>
- _Relies on_
  + [[InfixPrecedence/ShuntYard]]
  + [[Closure]]
  + [[Core/Common/Context]]
  + [[NameSpace]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
***** Passes <<Contextify/Passes>>
- _Relies on_
  + [[Contextify/Environment]]
  + [[InfixPrecedence/ShuntYard]]
  + [[Closure]]
  + [[Core/Common/Context]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
***** InfixPrecedence
****** ShuntYard <<InfixPrecedence/ShuntYard>>
- This implements the Shunt Yard algorithm for determining the
  precedence of operations
- _Relies on_
  + [[Library]]
***** ToContext
****** ResolveOpenInfo
- This module is responsible for adding the reverse open
  information to the context, along with the alias map of what
  symbols get qualified to what module
- This module accepts a list of =PreQualified= which talks
  about
  1. The explicit module itself
  2. Any opens this module does
  3. Any modules defined in this module as to have implicit imports
- Currently the most complicated part of this module is the resolve
  section that creates an =OpenMap=
  + This code is responsible for taking in all the opens and
    properly storing them fully qualified.
  + This has to try to open as much as possible as we could have
    =open Michelson= =open Prelude=, in which Michelson is inside
    of prelude so it can't be resolved right away. This way can
    lead to ambiguities if it does exist so one has to be a bit
    careful opening in this way!
- The other bits of code are stand alone algorithms for filling in
  the reverse map and the qualification from that point
  forward.... these are thankfully quite straight forward
- _Relies on_
  + [[Core/Common/Context]]
  + [[NameSpace]]
  + [[Open]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
****** Sexp <<ToContext/Sexp>>
- _Relies on_
  + [[ToContext/Types]]
  + [[Core/Common/Context]]
  + [[NameSpace]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
****** Types <<ToContext/Types>>
- _Relies on_
  + [[Core/Common/Context]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
**** Core
***** Common
****** Context
******* Traverse
Calculate mutually-recursive groups of definitions.
- _Relies on_
  + [[Core/Common/Context]]
  + [[Traverse/Types]]
  + [[NameSpace]]
  + [[FreeVars]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
******** Types <<Traverse/Types>>
- _Relies on_
  + [[Context/Types]]
  + [[Context/Types]]
  + [[Library]]
  + [[NameSymbol]]
**** Desugar
Desugar takes the frontend syntax and through the =desugar=
function, removes all extra parts of syntax that can be boiled down
to simple macro expansion (simplification of the frontend syntax
from the syntax alone with no extra information needed!)
- _Relies on_
  + [[Desugar/Passes]]
  + [[Library]]
  + [[Library/Sexp]]
***** Passes <<Desugar/Passes>>
Passes contains a list of passes on the frontend syntax that can be
done with no extra information needed. Thus we export the following passes
- Removing Explicit Module declarations
- Removing Guards
- Conds ⟶ If ⟶ Match
- Combining signatures to functions
- Removing punned record arguments
- Remvoing Do syntax
- _Relies on_
  + [[Library]]
  + [[Library/Sexp]]
**** ToCore
***** FromFrontend
- _Relies on_
  + [[Core/Common/Context]]
  + [[HR]]
  + [[Core/IR]]
  + [[Core/Parameterisation]]
  + [[Translate]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
  + [[Usage]]
  + [[ToCore/Types]]
***** Types <<ToCore/Types>>
- _Relies on_
  + [[Core/Common/Context]]
  + [[HR]]
  + [[Core/IR]]
  + [[IR/Types/Base]]
  + [[Core/Parameterisation]]
  + [[Library]]
  + [[LineNum]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
  + [[Usage]]
** test
*** Main <<Translate/test/Main>>
- _Relies on_
  + [[Library]]
*** Test
**** Contextify <<Test/Contextify>>
- _Relies on_
  + [[Juvix/Contextify]]
  + [[Contextify/Environment]]
  + [[ResolveOpenInfo]]
  + [[Core/Common/Context]]
  + [[Library]]
  + [[Library/Sexp]]
**** Golden
- _Relies on_
  + [[Frontend/Parser]]
  + [[Frontend/Sexp]]
  + [[Frontend/Types]]
  + [[Frontend/Types/Base]]
  + [[Library]]
**** Context
***** Environment <<Context/Environment>>
- _Relies on_
  + [[Juvix/Contextify]]
  + [[Contextify/Environment]]
  + [[Closure]]
  + [[Library]]
  + [[HashMap]]
  + [[NameSymbol]]
***** Helpers <<Context/Helpers>>
- _Relies on_
  + [[Juvix/Contextify]]
  + [[ResolveOpenInfo]]
  + [[ToContext/Types]]
  + [[Core/Common/Context]]
  + [[Desugar]]
  + [[Frontend/Parser]]
  + [[Frontend/Sexp]]
  + [[Frontend/Types/Base]]
  + [[Library]]
  + [[Library/Sexp]]
**** Contextualise
***** Contextify <<Contextualise/Contextify>>
- _Relies on_
  + [[Juvix/Contextify]]
  + [[Core/Common/Context]]
  + [[Desugar]]
  + [[Frontend/Parser]]
  + [[Frontend/Sexp]]
  + [[Frontend/Types]]
  + [[Library]]
  + [[Parser/Internal]]
  + [[Library/Sexp]]
***** Infix
****** ShuntYard <<Infix/ShuntYard>>
- _Relies on_
  + [[InfixPrecedence/ShuntYard]]
  + [[Library]]
**** Conversion
***** ML
Temporary conversion from the Sexpression syntax to the ML syntax
**** Desugar
***** Sexp <<Desugar/Sexp>>
- _Relies on_
  + [[Desugar/Passes]]
  + [[Library]]
  + [[Library/Sexp]]
**** Sexp
***** Helpers <<Sexp/Helpers>>
- _Relies on_
  + [[Juvix/Contextify]]
  + [[Core/Common/Context]]
  + [[Desugar]]
  + [[Frontend/Parser]]
  + [[Frontend/Sexp]]
  + [[Frontend/Types/Base]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Library/Sexp]]
