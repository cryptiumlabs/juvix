* Juvix
** Backends
- [[Backends]] are the targets for optimized code output specific to a
  platform
- Currently the LLVM backend will serve as the reference
  implementation
- The following backends are planned
  1. LLVM
  2. Michelson
  3. WASM
     - Most likely through LLVM
  4. Various Arithmetic Circuits
     - For use in ZKP's
*** ArithmeticCircuit
**** Parameterisation <<ArithmeticCircuit/Parameterisation>>
- _Relies on_
  + [[Library]]
**** Compilation <<ArithmeticCircuit/Compilation>>
- _Relies on_
  + [[ArithmeticCircuit/Compilation/Types]]
  + [[ArithmeticCircuit/Parameterisation]]
  + [[Library]]
***** Types <<ArithmeticCircuit/Compilation/Types>>
- _Relies on_
  + [[Library]]
*** LLVM
- Serves as the LLVM backend compiler to Juvix.
- This is an alternative to the interpreter provided.
**** Codegen
- _Relies on_
  + [[Block]]
  + [[Constants]]
  + [[Codegen/Default]]
  + [[Codegen/Graph]]
  + [[Codegen/Types]]
***** Block
- Has the code necessary to generate LLVM Code
- _Relies on_
  + [[Codegen/Shared]]
  + [[Codegen/Types]]
  + [[Library]]
  + [[HashMap]]
***** Constants
Module for predefined constants
- _Relies on_
  + [[Library]]
***** Default <<Codegen/Default>>
This module provides the default environment to run LLVM code in
- _Relies on_
  + [[Library]]
***** Graph <<Codegen/Graph>>
Operations necessary to update nodes
- _Relies on_
  + [[Block]]
  + [[Codegen/Types]]
  + [[Library]]
***** Shared <<Codegen/Shared>>
Shared between Types and Sum
- _Relies on_
  + [[Library]]
***** Sum
Provides a mechanism for defining Sum types
- Has the code to encode a sum type via what is defined by the user or
  what is defined to create the interaction net system.
- _Relies on_
  + [[Codegen/Shared]]
  + [[Library]]
***** Types <<Codegen/Types>>
- _Relies on_
  + [[Codegen/Shared]]
  + [[Sum]]
  + [[Library]]
**** Net
***** EAC <<Net/EAC>>
- _Relies on_
  + [[Library]]
****** Types <<Net/EAC/Types>>
- _Relies on_
  + [[Library]]
*** Michelson
**** Optimisation
- _Relies on_
  + [[Library]]
  + [[Michelson/Compilation/Types]]
**** Parameterisation <<Michelson/Parameterisation>>
- _Relies on_
  + [[Library]]
**** Compilation <<Michelson/Compilation>>
- _Relies on_
  + [[Term]]
  + [[Compilation/Type]]
  + [[Michelson/Compilation/Types]]
  + [[Util]]
  + [[Optimisation]]
  + [[Michelson/Parameterisation]]
  + [[Library]]
***** Term
- _Relies on_
  + [[Michelson/Compilation/Types]]
  + [[Util]]
  + [[Michelson/Parameterisation]]
  + [[Library]]
***** Type <<Compilation/Type>>
- _Relies on_
  + [[Michelson/Compilation/Types]]
  + [[Michelson/Parameterisation]]
  + [[Library]]
***** Types <<Michelson/Compilation/Types>>
- _Relies on_
  + [[Michelson/Parameterisation]]
  + [[Library]]
***** Util
- _Relies on_
  + [[Michelson/Compilation/Types]]
  + [[Library]]
** Core
- _Relies on_
  + [[Core/Erasure]]
  + [[Pipeline]]
  + [[Translate]]
  + [[Usage]]
*** Pipeline
- _Relies on_
  + [[Core/Erasure]]
  + [[Translate]]
  + [[Core/Types]]
  + [[Usage]]
  + [[Library]]
*** Translate
- _Relies on_
  + [[Utility]]
  + [[Library]]
*** Types <<Core/Types>>
- _Relies on_
  + [[Library]]
*** Usage
- _Relies on_
  + [[Library]]
*** Utility
- _Relies on_
  + [[Library]]
*** EAC <<Core/EAC>>
- This directory contains the implementation of =Eal= and the inferred
  bracket checker on =Eal=
- _Relies on_
  + [[Check]]
  + [[ConstraintGen]]
  + [[EAC/Erasure]]
  + [[EAC/Parser]]
  + [[Solve]]
  + [[Core/EAC/Types]]
**** Check
- A constraint checker for EAC.
- _Relies on_
  + [[ConstraintGen]]
  + [[Solve]]
  + [[Core/EAC/Types]]
  + [[Erased/Types]]
  + [[Core/Types]]
  + [[Library]]
**** ConstraintGen
- _Relies on_
  + [[Core/EAC/Types]]
  + [[Erased/Types]]
  + [[Core/Types]]
  + [[Library]]
**** Erasure <<EAC/Erasure>>
- _Relies on_
  + [[Core/EAC/Types]]
  + [[Erased/Types]]
**** Parser <<EAC/Parser>>
- _Relies on_
  + [[Core/EAC/Types]]
  + [[Unit]]
  + [[Library]]
**** Solve
- A Z3 solver for the generated =Eal= Constraints
- Can generate multiple constraints that will be used along side the
  Bracket checker to confirm that the solved constraints Z3 gives us
  is correct
- _Relies on_
  + [[Core/EAC/Types]]
  + [[Library]]
**** Types <<Core/EAC/Types>>
- _Relies on_
  + [[Erased/Types]]
  + [[Library]]
*** Erased
- _Relies on_
  + [[Evaluator]]
  + [[Erased/Types]]
**** Evaluator
- _Relies on_
  + [[Erased/Types]]
  + [[Library]]
**** Types <<Erased/Types>>
- _Relies on_
  + [[Library]]
*** Erasure <<Core/Erasure>>
- _Relies on_
  + [[Algorithm]]
**** Algorithm
- _Relies on_
  + [[Erasure/Types]]
  + [[Translate]]
  + [[Library]]
**** Types <<Erasure/Types>>
- _Relies on_
  + [[Library]]
*** HR
- _Relies on_
  + [[HR/Parser]]
  + [[HR/Types]]
**** Parser <<HR/Parser>>
- _Relies on_
  + [[HR/Types]]
  + [[Core/Types]]
  + [[Usage]]
  + [[Library]]
**** Types <<HR/Types>>
- _Relies on_
  + [[Usage]]
  + [[Library]]
*** IR
- _Relies on_
  + [[Typechecker]]
  + [[IR/Types]]
**** Typechecker
- _Relies on_
  + [[IR/Types]]
  + [[Core/Types]]
  + [[Usage]]
  + [[Library]]
**** Types <<IR/Types>>
- _Relies on_
  + [[Usage]]
  + [[Library]]
*** Parameterisations
**** All
- _Relies on_
  + [[Core/Types]]
  + [[Library]]
**** Naturals
- _Relies on_
  + [[Core/Types]]
  + [[Library]]
**** Unit
- _Relies on_
  + [[Core/Types]]
  + [[Library]]
** Encoding
*** Encoding
- This provides generic functions used by the various encodings in
  this directory
- _Relies on_
  + [[Encoding/Types]]
  + [[Library]]
*** Mendler
- Gives a =Mendler= encoding from an =ADT=.
- This file is not done as Ι have yet to find a way to convert any
  general recursive function into a proper =Mendler= form.
- This however will do the boilerplate of changing an =ADT= to
  =Mendler= and the structure of a case expression into proper
  =Mendler= form
- _Relies on_
  + [[Encoding]]
  + [[Encoding/Types]]
  + [[Library]]
*** Scott
- Gives a =Scott= encoding from an =ADT= and works properly for case
  expressions
- Overall this encoding just works™
- _Relies on_
  + [[Encoding]]
  + [[Encoding/Types]]
  + [[Library]]
*** Types <<Encoding/Types>>
- _Relies on_
  + [[Library]]
** Interpreter
- Although slower than [[Backends]], the interpreter serves as a
  reference point to play, modify, and debug features that will go
  in the various compiler backends
*** InteractionNet
- _Relies on_
  + [[InteractionNet/Default]]
  + [[InteractionNet/Parser]]
  + [[Translation]]
  + [[InteractionNet/Type]]
**** Default <<InteractionNet/Default>>
Gives the default execution environment for netToAst
Can be added to via core translation
- _Relies on_
  + [[InteractionNet/Shared]]
  + [[Library]]
**** NodeInterface
- Serves as a generic lens layer for various Node types in interaction nets
  1. Primary port details
     - Open or Bound?
  2. Auxiliary port details
     - Open or Bound?
  3. Type Classes aliases for having just a Primary port, or an
     Auxiliary port and a Primary, or two Auxiliary ports and a
     primary, and so forth.
- _Relies on_
  + [[Library]]
**** Parser <<InteractionNet/Parser>>
- Parses the syntax according to the formal =BNF=
- _Relies on_
  + [[InteractionNet/Default]]
  + [[InteractionNet/Shared]]
  + [[InteractionNet/Type]]
  + [[Library]]
**** Shared <<InteractionNet/Shared>>
- _Relies on_
  + [[Library]]
**** Translation
- Translates the default abstract syntax into Interaction nets
  + Also translates the net into the an ast
- _Relies on_
  + [[Interface]]
  + [[NodeInterface]]
  + [[InteractionNet/Shared]]
  + [[Library]]
**** Type <<InteractionNet/Type>>
- Serves as the AST for all operations on [[Nets/Default]]
- Resembles the =BOHM= syntax/operation set, however it alters the
  operation set quite a bit
  + _Added_
    1. Notion of some kind of primitive value
    2. Curry 1-3
       - This allows custom functions to be manifested on primitive
         values
  + _Removed_
    1. =Letrec=
       - While here, it isn't fully implemented
    2. Hard coded math operations
       - This has been moved to primitive value operations
- _Relies on_
  + [[InteractionNet/Shared]]
  + [[Library]]
**** Backends
***** Env
- Env serves as the environment for running the back-ends
  + This includes the diagnostic information about how the code is ran
  + Also includes the effect handler types and the runner functions
    for them
- Also gives functions needed to increment diagnostic information
  + see =incGraphStepSize= and =sequentalStep=
  + File will also be imported in [[Nets]] due to these two functions
- _Relies on_
  + [[Interface]]
  + [[Library]]
***** Graph <<Backends/Graph>>
- This is an implementation of said interfacing using =FGL=
- This code will imported in Tests as a possible back-end for testing.
  + This back-end is more useful than [[Maps]] as it can produce
    graphical outputs, see [[Visualize]]
- _Relies on_
  + [[Env]]
  + [[Interface]]
  + [[NodeInterface]]
  + [[Library]]
***** Interface
- Interface serves as a file that has common types between the various
  back ends along with two interfaces each back-end must support
  + This also includes functions derived from the interface functions!
- This file will be the file [[Nets]] will import as it provides the
  interface along with derived functions
- _Relies on_
  + [[NodeInterface]]
  + [[Library]]
***** Maps
- this is an implementation of said interface using the =EnumMap= data structure
- This code will be imported in Tests as a possible back-end for testing
- _Relies on_
  + [[Env]]
  + [[Interface]]
  + [[NodeInterface]]
  + [[Library]]
**** Nets
***** Combinators
- An evaluation for a simple combination calculus language, only has
  three ports
  1. Con
  2. Dup
  3. Era
- _Relies on_
  + [[Env]]
  + [[Interface]]
  + [[NodeInterface]]
  + [[Library]]
***** Default <<Nets/Default>>
- An evaluator for the Default Language
- Serves as a reference way of creating interaction nets
- _Relies on_
  + [[Env]]
  + [[Interface]]
  + [[NodeInterface]]
  + [[InteractionNet/Shared]]
  + [[Library]]
** Library
- The standard Library for the project
  + Thus all code will depend on this module without stating otherwise
- Is mostly =Protolude= except with a few changes
  + _Additions_
    * ∨   :: Serves as an or function
    * ∧   :: Serves as an and function
    * |<< :: Serves as a map function
    * >>| :: Serves as the flip map function
  + _Changes_
    * The Capability library is imported and replaces the standard =MTL=
      constructs in =Protolude=
- _Relies on_
  + [[PrettyPrint]]
*** HashMap
- The HashMap for the codebase.
- Basically just imports Data.HashMap.Strict
  + While giving the operation =!?=.
- Every hash in the code base should use this, except when it needs
  to compare keys by the =Ordering= metric instead.
*** PrettyPrint
** Visualize
*** Dot
- Generates a dot file in order to produce a simple image of a
  interaction net
- Also provides a way of generating gifs (and the images used to
  generate said gif), displaying every reduction step until the term
  is normalized
- _Relies on_
  + [[Env]]
  + [[Backends/Graph]]
  + [[Nets/Default]]
  + [[Library]]
  + [[Visualize/Graph]]
*** Graph <<Visualize/Graph>>
- A simple function for showing the graph as a proper net
- Really should be improved upon or removed
- _Relies on_
  + [[Library]]
