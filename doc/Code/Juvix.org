* Juvix
** Pipeline <<Juvix/Pipeline>>
- _Relies on_
  + [[Core]]
  + [[Context]]
  + [[FromFrontend]]
  + [[Types]]
  + [[Parameterisation]]
  + [[Frontend]]
  + [[Environment]]
  + [[Library]]
** Backends
- [[Backends]] are the targets for optimized code output specific to a
  platform
- Currently the LLVM backend will serve as the reference
  implementation
- The following backends are planned
  1. LLVM
  2. Michelson
  3. WASM
     - Most likely through LLVM
  4. Various Arithmetic Circuits
     - For use in ZKP's
*** ArithmeticCircuit
**** Compilation
**** Parameterisation
*** LLVM
**** Codegen
***** Graph
**** JIT
**** Net
***** EAC
*** Michelson
**** Compilation
**** DSL
** Core
- _Relies on_
  + [[Erasure]]
  + [[Core/Pipeline]]
  + [[Translate]]
  + [[Types]]
  + [[Types]]
  + [[FrontendContextualise]]
  + [[Environment]]
  + [[FrontendDesugar]]
  + [[Library]]
  + [[NameSymbol]]
*** FromFrontend
- _Relies on_
  + [[Context]]
  + [[HR]]
  + [[IR]]
  + [[Base]]
  + [[Parameterisation]]
  + [[Translate]]
  + [[FrontendContextualise]]
  + [[Types]]
  + [[Library]]
  + [[NameSymbol]]
  + [[Usage]]
*** Pipeline <<Core/Pipeline>>
- _Relies on_
  + [[Michelson]]
  + [[Application]]
  + [[ErasedAnn]]
  + [[Prim]]
  + [[Erasure]]
  + [[HR]]
  + [[IR]]
  + [[Types]]
  + [[Translate]]
  + [[Types]]
  + [[Library]]
  + [[Usage]]
*** Common
**** Context
*** EAC
*** Erased
**** Types
*** ErasedAnn
*** Erasure
*** HR
*** HRAnn
*** IR
**** Typechecker
**** Types
*** IRAnn
*** Parameterisations
** Encoding
*** Encoding
- This provides generic functions used by the various encodings in
  this directory
- _Relies on_
  + [[Types]]
  + [[Library]]
  + [[HashMap]]
*** Mendler
- Gives a =Mendler= encoding from an =ADT=.
- This file is not done as Ι have yet to find a way to convert any
  general recursive function into a proper =Mendler= form.
- This however will do the boilerplate of changing an =ADT= to
  =Mendler= and the structure of a case expression into proper
  =Mendler= form
- _Relies on_
  + [[Encoding]]
  + [[Types]]
  + [[Library]]
  + [[HashMap]]
*** Scott
- Gives a =Scott= encoding from an =ADT= and works properly for case
  expressions
- Overall this encoding just works™
- _Relies on_
  + [[Encoding]]
  + [[Types]]
  + [[Library]]
  + [[HashMap]]
*** Types
- _Relies on_
  + [[Library]]
  + [[HashMap]]
** Frontend
*** Types
** FrontendContextualise
*** Contextify
*** InfixPrecedence
*** ModuleOpen
** FrontendDesugar
*** CombineMultiple
*** RemoveCond
*** RemoveDo
*** RemoveGuard
*** RemoveModules
*** RemovePunned
*** RemoveSignature
** INetIR
** Interpreter
*** InteractionNet
**** Backends
**** Nets
** Library
