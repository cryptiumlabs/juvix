mod Prelude.Michelson where

-- datatypes
let option    = %Michelson.option
let list      = %Michelson.list
let set       = %Michelson.set
let operation = %Michelson.operation
let contract  = %Michelson.contract
let pair      = %Michelson.pair
let either    = %Michelson.either
let map       = %Michelson.map
let big-map   = %Michelson.big-map

-- primitive types
let key       = %Michelson.key
let unit-t    = %Michelson.unit-t
let signature = %Michelson.signature
let chain-id  = %Michelson.chain-id
let int       = %Michelson.int
let nat       = %Michelson.nat
let string    = %Michelson.string
let bytes     = %Michelson.bytes
let mutez     = %Michelson.mutez
let bool      = %Michelson.bool
let key-hash  = %Michelson.key-hash
let timestamp = %Michelson.timestamp
let address   = %Michelson.address

-- arithmetic functions
sig add : (x : ty) -> x -> x -> x
let add = %Michelson.add

sig mul : (x : ty) -> x -> x -> x
let mul = %Michelson.mul

sig sub : (x : ty) -> x -> x -> x
let sub = %Michelson.sub

sig div : (x : ty) -> x -> x -> x
let div = %Michelson.div

sig abs : (x : ty) -> x -> x -> x
let abs = %Michelson.abs

-- boolean functions
sig and% : (x : ty) -> x -> x -> x
let and% = %Michelson.and

sig or : (x : ty) -> x -> x -> x
let or = %Michelson.or

sig xor : (x : ty) -> x -> x -> x
let xor = %Michelson.xor

sig not : (x : ty) -> x -> x -> x
let not = %Michelson.not

sig compare : (x : ty) -> x -> x -> int
let compare = %Michelson.compare

-- other functions
sig now : timestamp
let now = %Michelson.now

sig amount : (x : ty) -> x -> unit-t
let amount = %Michelson.amount

sig balance : (x : ty) -> address -> x
let balance = %Michelson.balance

sig sha256 : bytes -> bytes
let sha256 = %Michelson.sha256

sig sha512 : bytes -> bytes
let sha512 = %Michelson.sha512

sig blake2b : bytes -> bytes
let blake2b = %Michelson.blake2b

sig source : address
let source = %Michelson.source

sig sender : address
let sender = %Michelson.sender

sig implicit-account : operation
let implicit-account = %Michelson.implicit-account

sig create-contract : operation
let create-contract = %Michelson.create-contract

sig transfer-tokens : (x : ty) -> address -> x -> hash-key
let transfer-tokens = %Michelson.transfer-tokens

sig set-delegate : address -> unit-t
let set-delegate = %Michelson.set-delegate

sig none : either unit-t a
let none = %Michelson.none

sig some : b -> either a b
let some = %Michelson.some

sig left : a -> either a b
let left = %Michelson.left

sig right : b -> either a b
let right = %Michelson.right

sig nil : list a
let nil = %Michelson.nil

sig cons : a -> list a
let cons = %Michelson.cons

sig car : list a -> a
let car = %Michelson.car

sig cdr : list a -> list a
let cdr = %Michelson.cdr

sig size : list a -> int
let size = %Michelson.size

sig empty-set : set a
let empty-set = %Michelson.empty-set

sig empty-map : map a
let empty-map = %Michelson.empty-map

sig empty-big-map : big-map a
let empty-big-map = %Michelson.empty-big-map

sig map : (x : ty) -> (a -> b) -> x a -> x b
let map = %Michelson.map

sig update : (x : ty) -> key -> a -> x a -> unit-t
let update = %Michelson.update

sig iter : (x : ty) -> (a -> b) -> (b -> unit-t)
let iter = %Michelson.iter

sig get : (x: ty) -> key -> x a -> a
let get = %Michelson.get

sig hash-key : key -> key-hash
let hash-key = %Michelson.hash-key

sig mem : (x : ty) -> x -> bool
let mem = %Michelson.mem

sig concat : (x : ty) -> x -> x -> x
let concat = %Michelson.concat

sig slice : nat -> string -> option string
let slice = %Michelson.slice

sig lsl : nat -> nat -> nat
let lsl = %Michelson.lsl

sig lsr : nat -> nat -> nat
let lsr = %Michelson.lsl

sig fail-with : (x : ty) -> x -> x
let fail-with = %Michelson.fail-with

sig self : (x : ty) -> x
let self = %Michelson.self

sig unit : unit-t
let unit = %Michelson.unit