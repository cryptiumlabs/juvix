Right
    ( Header
        ( "Polynomial" :| [] )
        [ ModuleOpen
            ( Open
                ( "Prelude" :| [] )
            )
        , ModuleOpen
            ( Open
                ( "Circuit" :| [] )
            )
        , Signature
            ( Sig
                { signatureName = "+"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "field" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "field" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Name
                                    ( "field" :| [] )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "+"
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Primitive
                            ( Prim
                                ( "Circuit" :| [ "add" ] )
                            )
                        )
                    }
                )
            )
        , Declaration
            ( Infixivity
                ( AssocL "+" 5 )
            )
        , Signature
            ( Sig
                { signatureName = "^"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "field" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "field" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Name
                                    ( "field" :| [] )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "^"
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Primitive
                            ( Prim
                                ( "Circuit" :| [ "exp" ] )
                            )
                        )
                    }
                )
            )
        , Declaration
            ( Infixivity
                ( AssocL "^" 8 )
            )
        , Signature
            ( Sig
                { signatureName = "*"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "field" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "field" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Name
                                    ( "field" :| [] )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "*"
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Primitive
                            ( Prim
                                ( "Circuit" :| [ "mul" ] )
                            )
                        )
                    }
                )
            )
        , Declaration
            ( Infixivity
                ( AssocL "*" 7 )
            )
        , Signature
            ( Sig
                { signatureName = "=="
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "field" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "field" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Name
                                    ( "bool" :| [] )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "=="
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Primitive
                            ( Prim
                                ( "Circuit" :| [ "eq" ] )
                            )
                        )
                    }
                )
            )
        , Declaration
            ( Infixivity
                ( AssocL "==" 2 )
            )
        , Signature
            ( Sig
                { signatureName = "main"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "field" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "field" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Infix
                                    ( Inf
                                        { infixLeft = Name
                                            ( "field" :| [] )
                                        , infixOp = "->" :| []
                                        , infixRight = Name
                                            ( "bool" :| [] )
                                        }
                                    )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "main"
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Lambda
                            ( Lamb
                                { lambdaArgs = MatchLogic
                                    { matchLogicContents = MatchName "x"
                                    , matchLogicNamed = Nothing
                                    } :|
                                    [ MatchLogic
                                        { matchLogicContents = MatchName "y"
                                        , matchLogicNamed = Nothing
                                        }
                                    , MatchLogic
                                        { matchLogicContents = MatchName "z"
                                        , matchLogicNamed = Nothing
                                        }
                                    ]
                                , lambdaBody = Infix
                                    ( Inf
                                        { infixLeft = Name
                                            ( "x" :| [] )
                                        , infixOp = "^" :| []
                                        , infixRight = Infix
                                            ( Inf
                                                { infixLeft = Constant
                                                    ( Number
                                                        ( Integer' 3 )
                                                    )
                                                , infixOp = "==" :| []
                                                , infixRight = Infix
                                                    ( Inf
                                                        { infixLeft = Name
                                                            ( "y" :| [] )
                                                        , infixOp = "*" :| []
                                                        , infixRight = Infix
                                                            ( Inf
                                                                { infixLeft = Constant
                                                                    ( Number
                                                                        ( Integer' 2 )
                                                                    )
                                                                , infixOp = "+" :| []
                                                                , infixRight = Constant
                                                                    ( Number
                                                                        ( Integer' 1 )
                                                                    )
                                                                }
                                                            )
                                                        }
                                                    )
                                                }
                                            )
                                        }
                                    )
                                }
                            )
                        )
                    }
                )
            )
        ]
    )