Rec
    { recordContents = T
        { public = fromList
            [
                ( "transfer-stor"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" ":" "stor"
                                ( ":infix" "->" "Token.Storage"
                                    ( ":infix" ":" "from"
                                        ( ":infix" "->" "Token.Address"
                                            ( ":infix" ":" "to"
                                                ( ":infix" "->" "Token.Address"
                                                    ( ":infix" ":" "num"
                                                        ( ":infix" "->"
                                                            ( ":refinement" "Nat.T"
                                                                ( "has-n" "stor.accounts" "from" "num" ) ) "Token.Storage" ) ) ) ) ) ) ) )
                        , defTerm =
                            ( ":lambda-case"
                                (
                                    ( "stor" "add-from" "add-to" "num" )
                                    ( ":let-match" "new-acc"
                                        ( ()
                                            ( "account-add"
                                                ( ":paren"
                                                    ( "account-sub" "stor.accounts" "add-from" ) ) "add-to" "num" ) )
                                        ( ":record-no-pun" "total-supply" "stor.total-supply" "accounts" "new-acc" ) ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "Error"
                , TypeDeclar
                    { definitionRepr =
                        ( "Error" () ( "NotEnoughFunds" ) ( "NotSameAccount" ) ( "NotOwnerToken" ) ( "NotEnoughTokens" ) ) } )
            ,
                ( "exec"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" "->" "Token.T"
                                ( ":infix" "->" "Transaction.T"
                                    ( "Either.T" "Error" "Token.T" ) ) )
                        , defTerm =
                            ( ":lambda-case"
                                (
                                    ( "token" "tx" )
                                    ( "case" "tx.data"
                                        (
                                            ( "Transfer" "_" )
                                            ( "case"
                                                ( "Validation.transfer" "token" "tx" )
                                                ( ( "True" )
                                                    ( "Right"
                                                        ( ":paren"
                                                            ( "transfer" "token" "tx" ) ) ) )
                                                ( ( "False" )
                                                    ( "case" "else"
                                                        ( ( "True" )
                                                            ( "Left" "NotEnoughFunds" ) ) ) ) ) )
                                        (
                                            ( "Mint" "_" )
                                            ( "case"
                                                ( "Validation.mint" "token" "tx" )
                                                ( ( "True" )
                                                    ( "Right"
                                                        ( ":paren"
                                                            ( "mint" "token" "tx" ) ) ) )
                                                ( ( "False" )
                                                    ( "case" "else"
                                                        ( ( "True" )
                                                            ( "Left" "NotEnoughFunds" ) ) ) ) ) ) ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "NotEnoughTokens"
                , SumCon
                    ( Sum { sumTDef = Nothing, sumTName = "Error" } ) )
            ,
                ( "NotSameAccount"
                , SumCon
                    ( Sum { sumTDef = Nothing, sumTName = "Error" } ) )
            ,
                ( "NotEnoughFunds"
                , SumCon
                    ( Sum { sumTDef = Nothing, sumTName = "Error" } ) )
            ,
                ( "NotOwnerToken"
                , SumCon
                    ( Sum { sumTDef = Nothing, sumTName = "Error" } ) )
            ,
                ( "account-add"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" "->" "Accounts.T"
                                ( ":infix" "->" "Token.Address"
                                    ( ":infix" "->" "Nat.T" "Accounts.T" ) ) )
                        , defTerm =
                            ( ":lambda-case"
                                (
                                    ( "accounts" "add" "number" )
                                    ( "Accounts.update" "accounts"
                                        ( ":paren"
                                            ( "+" "number" ) ) "add" ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "account-sub"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" ":" "acc"
                                ( ":infix" "->" "Accounts.T"
                                    ( ":infix" ":" "add"
                                        ( ":infix" "->" "Token.Address"
                                            ( ":infix" ":" "num"
                                                ( ":infix" "->"
                                                    ( ":refinement" "Nat.T"
                                                        ( "has-n" "acc" "add" "num" ) ) "Accounts.T" ) ) ) ) ) )
                        , defTerm =
                            ( ":lambda-case"
                                (
                                    ( "accounts" "add" "number" )
                                    ( "case"
                                        ( "Accounts.select" "accounts" "add" )
                                        (
                                            ( "Just" "balance" )
                                            ( "Accounts.put" "accounts" "add"
                                                ( ":paren"
                                                    ( ":infix" "-" "balance" "number" ) ) ) ) ) ) )
                        , defPrecedence = Pred Left 9 } ) )
            ,
                ( "has-n"
                , Def
                    ( D
                        { defUsage = Nothing
                        , defMTy = Just
                            ( ":infix" "->" "Accounts.T"
                                ( ":infix" "->" "Token.Address"
                                    ( ":infix" "->" "Nat" "Bool" ) ) )
                        , defTerm =
                            ( ":lambda-case"
                                (
                                    ( "accounts" "add" "to-transfer" )
                                    ( "case"
                                        ( "Accounts.select" "accounts" "add" )
                                        (
                                            ( "Just" "n" )
                                            ( ":infix" "<=" "to-transfer" "n" ) )
                                        ( ( "Nothing" ) "False" ) ) ) )
                        , defPrecedence = Pred Left 9 } ) ) ]
        , private = fromList [] }
    , recordMTy = Nothing
    , recordOpenList = []
    , recordQualifiedMap = map }