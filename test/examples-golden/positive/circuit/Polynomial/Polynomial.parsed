Right
    ( Header
        ( "Polynomial" :| [] )
        [ ModuleOpen
            ( Open
                ( "Prelude" :| [] )
            )
        , ModuleOpen
            ( Open
                ( "Circuit" :| [] )
            )
        , Signature
            ( Sig
                { signatureName = "+"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "field" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "field" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Name
                                    ( "field" :| [] )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "+"
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Primitive
                            ( Prim
                                ( "Circuit" :| [ "add" ] )
                            )
                        )
                    }
                )
            )
        , Declaration
            ( Infixivity
                ( AssocL "+" 5 )
            )
        , Signature
            ( Sig
                { signatureName = "^"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "field" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "field" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Name
                                    ( "field" :| [] )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "^"
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Primitive
                            ( Prim
                                ( "Circuit" :| [ "exp" ] )
                            )
                        )
                    }
                )
            )
        , Declaration
            ( Infixivity
                ( AssocL "^" 8 )
            )
        , Signature
            ( Sig
                { signatureName = "*"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "field" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "field" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Name
                                    ( "field" :| [] )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "*"
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Primitive
                            ( Prim
                                ( "Circuit" :| [ "mul" ] )
                            )
                        )
                    }
                )
            )
        , Declaration
            ( Infixivity
                ( AssocL "*" 7 )
            )
        , Signature
            ( Sig
                { signatureName = "=="
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "field" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "field" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Name
                                    ( "bool" :| [] )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "=="
                    , functionLikeArgs = []
                    , functionLikeBody = Body
                        ( Primitive
                            ( Prim
                                ( "Circuit" :| [ "eq" ] )
                            )
                        )
                    }
                )
            )
        , Declaration
            ( Infixivity
                ( AssocL "==" 2 )
            )
        , Signature
            ( Sig
                { signatureName = "main"
                , signatureUsage = Nothing
                , signatureArrowType = Infix
                    ( Inf
                        { infixLeft = Name
                            ( "field" :| [] )
                        , infixOp = "->" :| []
                        , infixRight = Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "field" :| [] )
                                , infixOp = "->" :| []
                                , infixRight = Name
                                    ( "bool" :| [] )
                                }
                            )
                        }
                    )
                , signatureConstraints = []
                }
            )
        , Function
            ( Func
                ( Like
                    { functionLikedName = "main"
                    , functionLikeArgs =
                        [ ConcreteA
                            ( MatchLogic
                                { matchLogicContents = MatchName "x"
                                , matchLogicNamed = Nothing
                                }
                            )
                        , ConcreteA
                            ( MatchLogic
                                { matchLogicContents = MatchName "y"
                                , matchLogicNamed = Nothing
                                }
                            )
                        ]
                    , functionLikeBody = Body
                        ( Infix
                            ( Inf
                                { infixLeft = Name
                                    ( "x" :| [] )
                                , infixOp = "^" :| []
                                , infixRight = Infix
                                    ( Inf
                                        { infixLeft = Constant
                                            ( Number
                                                ( Integer' 3 )
                                            )
                                        , infixOp = "==" :| []
                                        , infixRight = Name
                                            ( "y" :| [] )
                                        }
                                    )
                                }
                            )
                        )
                    }
                )
            )
        ]
    )