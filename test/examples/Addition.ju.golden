
  [ Function'
      ( Func'
          ( Like'
              { functionLikedName = "nat",
                functionLikeArgs = [],
                functionLikeBody = Body' (Primitive' (Prim' ("Michelson" :| ["nat"]) ()) ()) (),
                annLike = ()
              }
          )
          ()
      )
      (),
    Function'
      ( Func'
          ( Like'
              { functionLikedName = "add",
                functionLikeArgs = [],
                functionLikeBody = Body' (Primitive' (Prim' ("Michelson" :| ["add"]) ()) ()) (),
                annLike = ()
              }
          )
          ()
      )
      (),
    Function'
      ( Func'
          ( Like'
              { functionLikedName = "pair",
                functionLikeArgs = [],
                functionLikeBody = Body' (Primitive' (Prim' ("Michelson" :| ["pair"]) ()) ()) (),
                annLike = ()
              }
          )
          ()
      )
      (),
    Type'
      ( Typ'
          { typeUsage = Nothing,
            typeName' = "Storage",
            typeArgs = [],
            typeForm =
              NonArrowed'
                { dataAdt =
                    Product'
                      ( Record'
                          ( Record'''
                              { recordFields =
                                  NameType''
                                    { nameTypeSignature =
                                        Name' ("nat" :| []) (),
                                      nameTypeName = Concrete' "value" (),
                                      annNameType' = ()
                                    }
                                    :| [ NameType''
                                           { nameTypeSignature = Name' ("nat" :| []) (),
                                             nameTypeName = Concrete' "valu" (),
                                             annNameType' = ()
                                           }
                                       ],
                                recordFamilySignature = Nothing,
                                annRecord'' = ()
                              }
                          )
                          ()
                      )
                      (),
                  annNonArrowed = ()
                },
            annTyp = ()
          }
      )
      (),
    Signature'
      ( Sig'
          { signatureName = "foo",
            signatureUsage = Nothing,
            signatureArrowType =
              Infix'
                ( Inf'
                    { infixLeft = Name' ("nat" :| []) (),
                      infixOp = "->" :| [],
                      infixRight =
                        Infix'
                          ( Inf'
                              { infixLeft = Name' ("storage" :| []) (),
                                infixOp = "->" :| [],
                                infixRight = Name' ("storage" :| []) (),
                                annInf = ()
                              }
                          )
                          (),
                      annInf = ()
                    }
                )
                (),
            signatureConstraints = [],
            annSig = ()
          }
      )
      (),
    Function'
      ( Func'
          ( Like'
              { functionLikedName = "foo",
                functionLikeArgs =
                  [ ConcreteA'
                      ( MatchLogic'
                          { matchLogicContents = MatchName' "va" (),
                            matchLogicNamed = Nothing,
                            annMatchLogic = ()
                          }
                      )
                      (),
                    ConcreteA'
                      ( MatchLogic'
                          { matchLogicContents =
                              MatchRecord'
                                ( Punned' ("value" :| []) ()
                                    :| [Punned' ("valu" :| []) ()]
                                )
                                (),
                            matchLogicNamed = Nothing,
                            annMatchLogic = ()
                          }
                      )
                      ()
                  ],
                functionLikeBody =
                  Body'
                    ( ExpRecord'
                        ( ExpressionRecord'
                            { expRecordFields =
                                NonPunned'
                                  ("value" :| [])
                                  ( Application'
                                      ( App'
                                          { applicationName = Name' ("add" :| []) (),
                                            applicationArgs =
                                              Name' ("valu" :| []) ()
                                                :| [Name' ("va" :| []) ()],
                                            annApp = ()
                                          }
                                      )
                                      ()
                                  )
                                  ()
                                  :| [ NonPunned'
                                         ("valu" :| [])
                                         ( Application'
                                             ( App'
                                                 { applicationName = Name' ("add" :| []) (),
                                                   applicationArgs = Name' ("value" :| []) () :| [Name' ("va" :| []) ()],
                                                   annApp = ()
                                                 }
                                             )
                                             ()
                                         )
                                         ()
                                     ],
                              annExpressionRecord = ()
                            }
                        )
                        ()
                    )
                    (),
                annLike = ()
              }
          )
          ()
      )
      (),
    Signature'
      ( Sig'
          { signatureName = "add-storage",
            signatureUsage = Nothing,
            signatureArrowType =
              Infix'
                ( Inf'
                    { infixLeft = Name' ("storage" :| []) (),
                      infixOp = "->" :| [],
                      infixRight = Name' ("nat" :| []) (),
                      annInf = ()
                    }
                )
                (),
            signatureConstraints = [],
            annSig = ()
          }
      )
      (),
    Function'
      ( Func'
          ( Like'
              { functionLikedName = "add-storage",
                functionLikeArgs =
                  [ ConcreteA'
                      ( MatchLogic'
                          { matchLogicContents =
                              MatchRecord'
                                ( Punned' ("value" :| []) ()
                                    :| [Punned' ("valu" :| []) ()]
                                )
                                (),
                            matchLogicNamed = Nothing,
                            annMatchLogic = ()
                          }
                      )
                      ()
                  ],
                functionLikeBody =
                  Body'
                    ( Application'
                        ( App'
                            { applicationName = Name' ("add" :| []) (),
                              applicationArgs = Name' ("value" :| []) () :| [Name' ("valu" :| []) ()],
                              annApp = ()
                            }
                        )
                        ()
                    )
                    (),
                annLike = ()
              }
          )
          ()
      )
      (),
    Signature'
      ( Sig'
          { signatureName = "default",
            signatureUsage = Nothing,
            signatureArrowType =
              Infix'
                ( Inf'
                    { infixLeft = Name' ("nat" :| []) (),
                      infixOp = "->" :| [],
                      infixRight =
                        Infix'
                          ( Inf'
                              { infixLeft = Name' ("storage" :| []) (),
                                infixOp = "->" :| [],
                                infixRight = Name' ("storage" :| []) (),
                                annInf = ()
                              }
                          )
                          (),
                      annInf = ()
                    }
                )
                (),
            signatureConstraints = [],
            annSig = ()
          }
      )
      (),
    Function'
      ( Func'
          ( Like'
              { functionLikedName = "default",
                functionLikeArgs =
                  [ ConcreteA'
                      ( MatchLogic'
                          { matchLogicContents = MatchName' "addnat" (),
                            matchLogicNamed = Nothing,
                            annMatchLogic = ()
                          }
                      )
                      (),
                    ConcreteA'
                      ( MatchLogic'
                          { matchLogicContents = MatchName' "storage" (),
                            matchLogicNamed = Nothing,
                            annMatchLogic = ()
                          }
                      )
                      ()
                  ],
                functionLikeBody =
                  Body'
                    ( Application'
                        ( App'
                            { applicationName = Name' ("pair" :| []) (),
                              applicationArgs =
                                Parened'
                                  ( Application'
                                      ( App'
                                          { applicationName = Name' ("add-storage" :| []) (),
                                            applicationArgs = Name' ("storage" :| []) () :| [],
                                            annApp = ()
                                          }
                                      )
                                      ()
                                  )
                                  ()
                                  :| [ Parened'
                                         ( Application'
                                             ( App'
                                                 { applicationName = Name' ("foo" :| []) (),
                                                   applicationArgs = Name' ("input" :| []) () :| [Name' ("storage" :| []) ()],
                                                   annApp = ()
                                                 }
                                             )
                                             ()
                                         )
                                         ()
                                     ],
                              annApp = ()
                            }
                        )
                        ()
                    )
                    (),
                annLike = ()
              }
          )
          ()
      )
      ()
  ]
