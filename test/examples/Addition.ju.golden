[Function' (Func' (Like' {functionLikedName = Sym "nat", functionLikeArgs = [], functionLikeBody = Body' (Primitive' (Prim' (Sym "Michelson" :| [Sym "nat"]) ()) ()) (), annLike = ()}) ()) (),Function' (Func' (Like' {functionLikedName = Sym "add", functionLikeArgs = [], functionLikeBody = Body' (Primitive' (Prim' (Sym "Michelson" :| [Sym "add"]) ()) ()) (), annLike = ()}) ()) (),Function' (Func' (Like' {functionLikedName = Sym "pair", functionLikeArgs = [], functionLikeBody = Body' (Primitive' (Prim' (Sym "Michelson" :| [Sym "pair"]) ()) ()) (), annLike = ()}) ()) (),Type' (Typ' {typeUsage = Nothing, typeName' = Sym "Storage", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' (Sym "nat" :| []) (), nameTypeName = Concrete' (Sym "value") (), annNameType' = ()} :| [NameType'' {nameTypeSignature = Name' (Sym "nat" :| []) (), nameTypeName = Concrete' (Sym "valu") (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) (),Signature' (Sig' {signatureName = Sym "foo", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' (Sym "nat" :| []) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "storage" :| []) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "storage" :| []) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = Sym "foo", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "va") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchRecord' (Punned' (Sym "value" :| []) () :| [Punned' (Sym "valu" :| []) ()]) (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (ExpRecord' (ExpressionRecord' {expRecordFields = NonPunned' (Sym "value" :| []) (Application' (App' {applicationName = Name' (Sym "add" :| []) (), applicationArgs = Name' (Sym "valu" :| []) () :| [Name' (Sym "va" :| []) ()], annApp = ()}) ()) () :| [NonPunned' (Sym "valu" :| []) (Application' (App' {applicationName = Name' (Sym "add" :| []) (), applicationArgs = Name' (Sym "value" :| []) () :| [Name' (Sym "va" :| []) ()], annApp = ()}) ()) ()], annExpressionRecord = ()}) ()) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = Sym "add-storage", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' (Sym "storage" :| []) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "nat" :| []) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = Sym "add-storage", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchRecord' (Punned' (Sym "value" :| []) () :| [Punned' (Sym "valu" :| []) ()]) (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Application' (App' {applicationName = Name' (Sym "add" :| []) (), applicationArgs = Name' (Sym "value" :| []) () :| [Name' (Sym "valu" :| []) ()], annApp = ()}) ()) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = Sym "default", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' (Sym "nat" :| []) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "storage" :| []) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "storage" :| []) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = Sym "default", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "addnat") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "storage") (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Application' (App' {applicationName = Name' (Sym "pair" :| []) (), applicationArgs = Parened' (Application' (App' {applicationName = Name' (Sym "add-storage" :| []) (), applicationArgs = Name' (Sym "storage" :| []) () :| [], annApp = ()}) ()) () :| [Parened' (Application' (App' {applicationName = Name' (Sym "foo" :| []) (), applicationArgs = Name' (Sym "input" :| []) () :| [Name' (Sym "storage" :| []) ()], annApp = ()}) ()) ()], annApp = ()}) ()) (), annLike = ()}) ()) ()]