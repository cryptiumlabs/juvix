NoHeader [ModuleOpen (Open ("Prelude" :| [])),ModuleOpen (Open ("Michelson" :| [])),Type (Typ {typeUsage = Nothing, typeName' = "Storage", typeArgs = [], typeForm = NonArrowed {dataAdt = Product (Record (Record'' {recordFields = NameType' {nameTypeSignature = Name ("nat" :| []), nameTypeName = Concrete "value"} :| [NameType' {nameTypeSignature = Name ("nat" :| []), nameTypeName = Concrete "valu"}], recordFamilySignature = Nothing}))}}),Signature (Sig {signatureName = "foo", signatureUsage = Nothing, signatureArrowType = Infix (Inf {infixLeft = Name ("nat" :| []), infixOp = "->" :| [], infixRight = Infix (Inf {infixLeft = Name ("storage" :| []), infixOp = "->" :| [], infixRight = Name ("storage" :| [])})}), signatureConstraints = []}),Function (Func (Like {functionLikedName = "foo", functionLikeArgs = [ConcreteA (MatchLogic {matchLogicContents = MatchName "va", matchLogicNamed = Nothing}),ConcreteA (MatchLogic {matchLogicContents = MatchRecord (Punned ("value" :| []) :| [Punned ("valu" :| [])]), matchLogicNamed = Nothing})], functionLikeBody = Body (ExpRecord (ExpressionRecord {expRecordFields = NonPunned ("value" :| []) (Application (App {applicationName = Name ("add" :| []), applicationArgs = Name ("valu" :| []) :| [Name ("va" :| [])]})) :| [NonPunned ("valu" :| []) (Application (App {applicationName = Name ("add" :| []), applicationArgs = Name ("value" :| []) :| [Name ("va" :| [])]}))]}))})),Signature (Sig {signatureName = "add-storage", signatureUsage = Nothing, signatureArrowType = Infix (Inf {infixLeft = Name ("storage" :| []), infixOp = "->" :| [], infixRight = Name ("nat" :| [])}), signatureConstraints = []}),Function (Func (Like {functionLikedName = "add-storage", functionLikeArgs = [ConcreteA (MatchLogic {matchLogicContents = MatchRecord (Punned ("value" :| []) :| [Punned ("valu" :| [])]), matchLogicNamed = Nothing})], functionLikeBody = Body (Application (App {applicationName = Name ("add" :| []), applicationArgs = Name ("value" :| []) :| [Name ("valu" :| [])]}))})),Signature (Sig {signatureName = "default", signatureUsage = Nothing, signatureArrowType = Infix (Inf {infixLeft = Name ("nat" :| []), infixOp = "->" :| [], infixRight = Infix (Inf {infixLeft = Name ("storage" :| []), infixOp = "->" :| [], infixRight = Name ("storage" :| [])})}), signatureConstraints = []}),Function (Func (Like {functionLikedName = "default", functionLikeArgs = [ConcreteA (MatchLogic {matchLogicContents = MatchName "addnat", matchLogicNamed = Nothing}),ConcreteA (MatchLogic {matchLogicContents = MatchName "storage", matchLogicNamed = Nothing})], functionLikeBody = Body (Application (App {applicationName = Name ("pair" :| []), applicationArgs = Parened (Application (App {applicationName = Name ("add-storage" :| []), applicationArgs = Name ("storage" :| []) :| []})) :| [Parened (Application (App {applicationName = Name ("foo" :| []), applicationArgs = Name ("input" :| []) :| [Name ("storage" :| [])]}))]}))}))]