open Prelude
open Prelude.Michelson

sig cons-pair : list operation -> nat -> pair (list operation) nat
let cons-pair = %Michelson.pair

sig nil : list operation
let nil = %Michelson.nil

sig add : nat -> nat -> nat
let add = %Michelson.add

sig car : pair nat nat -> nat
let car = %Michelson.car

sig cdr : pair nat nat -> nat
let cdr = %Michelson.cdr

sig main : pair unit-t (pair int int) -> pair (list operation) (pair int int)
let main = \ps -> cons-pair nil (cons-pair (cdr (cdr ps)) (car (cdr ps)))
