let ty_ = %Builtin.Type

sig ty : ty_ 1
let ty = ty_ 0

let omega = %Builtin.Omega
let arr = %Builtin.Arrow

let (->) = arr omega
declare infixr (->) 1

let arrow = arr omega

let (:) = %Builtin.Colon
declare infixr (:) 2

sig int : ty
let int = %Michelson.int

sig pair : ty
let pair = %Michelson.pair

--sig main : TopLevel.Identity.arrow TopLevel.Identity.int (TopLevel.Identity.arrow TopLevel.Identity.int (TopLevel.Identity.pair TopLevel.Identity.int TopLevel.Identity.int))
--let main = \param storage -> (%Michelson.cons : TopLevel.Identity.arrow TopLevel.Identity.int (TopLevel.Identity.arrow TopLevel.Identity.int (TopLevel.Identity.pair TopLevel.Identity.int TopLevel.Identity.int))) param storage

sig main : TopLevel.Identity.arrow (%Michelson.int) (TopLevel.Identity.arrow (%Michelson.int) ((%Michelson.pair : TopLevel.Identity.arrow TopLevel.Identity.ty (TopLevel.Identity.arrow TopLevel.Identity.ty TopLevel.Identity.ty)) (%Michelson.int) (%Michelson.int)))
let main = \param storage -> (%Michelson.cons : TopLevel.Identity.arrow (%Michelson.int) (TopLevel.Identity.arrow (%Michelson.int) (TopLevel.Identity.pair (%Michelson.int) (%Michelson.int)))) param storage
