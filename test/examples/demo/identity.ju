let ty_ = %Builtin.Type

sig ty : ty_ 1
let ty = ty_ 0

let omega = %Builtin.Omega
let arr = %Builtin.Arrow

let (->) = arr omega
declare infixr (->) 1

let arrow = arr omega

let (:) = %Builtin.Colon
declare infixr (:) 2

sig int : ty
let int = %Michelson.int

let pair = %Builtin.Pair

sig list : ty -> ty
let list = %Michelson.list

sig operation : ty
let operation = %Michelson.operation

sig nil : list operation
let nil = %Michelson.nil

sig pairTy : ty -> ty -> ty
let pairTy = %Michelson.pair-ty

sig makePair : list operation -> int -> pairTy (list operation) int
let makePair = %Michelson.pair

sig car : pairTy int int -> int
let car = %Michelson.car

sig main : pairTy int int -> pairTy (list operation) int
let main = \params -> makePair nil (car params)
