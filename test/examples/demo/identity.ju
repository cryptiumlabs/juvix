let ty_ = %Builtin.Type

sig ty : ty_ 1
let ty = ty_ 0

let omega = %Builtin.Omega
let arr = %Builtin.Arrow

let (->) = arr omega
declare infixr (->) 1

let (:) = %Builtin.Colon
declare infixr (:) 2

sig int : ty
let int = %Michelson.int

sig pair : ty
let pair = %Michelson.pair

sig cons : TopLevel.Identity.int -> TopLevel.Identity.int -> TopLevel.Identity.pair TopLevel.Identity.int TopLevel.Identity.int
let cons = %Michelson.cons

sig main : TopLevel.Identity.int -> TopLevel.Identity.int -> TopLevel.Identity.pair TopLevel.Identity.int TopLevel.Identity.int
let main = \param storage -> (%Michelson.cons : TopLevel.Identity.int -> TopLevel.Identity.int -> TopLevel.Identity.pair TopLevel.Identity.int TopLevel.Identity.int) param storage
