[Function' (Func' (Like' {functionLikedName = Sym "string", functionLikeArgs = [], functionLikeBody = Body' (Primitive' (Prim' (Sym "Michelson" :| [Sym "string"]) ()) ()) (), annLike = ()}) ()) (),Function' (Func' (Like' {functionLikedName = Sym "pair", functionLikeArgs = [], functionLikeBody = Body' (Primitive' (Prim' (Sym "Michelson" :| [Sym "pair"]) ()) ()) (), annLike = ()}) ()) (),Function' (Func' (Like' {functionLikedName = Sym "unit", functionLikeArgs = [], functionLikeBody = Body' (Primitive' (Prim' (Sym "Param" :| [Sym "unit"]) ()) ()) (), annLike = ()}) ()) (),Function' (Func' (Like' {functionLikedName = Sym "storage", functionLikeArgs = [], functionLikeBody = Body' (Name' (Sym "unit" :| []) ()) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = Sym "default", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' (Sym "string" :| []) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "storage" :| []) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "storage" :| []) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = Sym "default", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "para") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "storage") (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Application' (App' {applicationName = Name' (Sym "pair" :| []) (), applicationArgs = List' (ListLit' [] ()) () :| [Name' (Sym "storage" :| []) ()], annApp = ()}) ()) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = Sym "init-storage", signatureUsage = Nothing, signatureArrowType = Name' (Sym "storage" :| []) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = Sym "init-storage", functionLikeArgs = [], functionLikeBody = Body' (Name' (Sym "unit" :| []) ()) (), annLike = ()}) ()) ()]