[ModuleOpen (Open ("Prelude" :| [])), Function (Func (Like {functionLikedName = "string", functionLikeArgs = [], functionLikeBody = Body (Primitive (Prim ("Michelson" :| ["string"])))})), Function (Func (Like {functionLikedName = "pair", functionLikeArgs = [], functionLikeBody = Body (Primitive (Prim ("Michelson" :| ["pair"])))})), Function (Func (Like {functionLikedName = "unit", functionLikeArgs = [], functionLikeBody = Body (Primitive (Prim ("Param" :| ["unit"])))})), Function (Func (Like {functionLikedName = "storage", functionLikeArgs = [], functionLikeBody = Body (Name ("unit" :| []))})), Signature (Sig {signatureName = "default", signatureUsage = Nothing, signatureArrowType = Infix (Inf {infixLeft = Name ("string" :| []), infixOp = "->" :| [], infixRight = Infix (Inf {infixLeft = Name ("storage" :| []), infixOp = "->" :| [], infixRight = Name ("storage" :| [])})}), signatureConstraints = []}), Function (Func (Like {functionLikedName = "default", functionLikeArgs = [ConcreteA (MatchLogic {matchLogicContents = MatchName "para", matchLogicNamed = Nothing}), ConcreteA (MatchLogic {matchLogicContents = MatchName "storage", matchLogicNamed = Nothing})], functionLikeBody = Body (Application (App {applicationName = Name ("pair" :| []), applicationArgs = List (ListLit []) :| [Name ("storage" :| [])]}))})), Signature (Sig {signatureName = "init-storage", signatureUsage = Nothing, signatureArrowType = Name ("storage" :| []), signatureConstraints = []}), Function (Func (Like {functionLikedName = "init-storage", functionLikeArgs = [], functionLikeBody = Body (Name ("unit" :| []))}))]
