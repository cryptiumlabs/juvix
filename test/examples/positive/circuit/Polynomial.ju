mod Polynomial where

open Prelude
open Circuit

sig add : field -> field -> field
let add  = %Circuit.add

sig (+) : field -> field -> field
let (+) = %Circuit.add
declare infixl (+) 5

sig (^) : field -> field -> field
let (^) = %Circuit.exp
declare infixl (^) 8

sig (*) : field -> field -> field
let (*) = %Circuit.mul
declare infixl (*) 7


sig (==) : field -> field -> bool
let (==) = %Circuit.eq
declare infixl (==) 2

sig main : field -> field -> field
let main x y = add x y -- 2 2 -- \x y -> x ^ 3 == y -- ^ 2 -- + 1-- x ^ 3 + 2 * x ^ 2 + 1 
