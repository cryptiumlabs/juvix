[Module' (Mod' (Like' {functionLikedName = "Token", functionLikeArgs = [], functionLikeBody = Body' (Function' (Func' (Like' {functionLikedName = "Address", functionLikeArgs = [], functionLikeBody = Body' (Infix' (Inf' {infixLeft = Name' ("s" :| []) (), infixOp = ":" :| [], infixRight = RefinedE' (TypeRefine' {typeRefineName = Name' ("String" :| ["T"]) (), typeRefineRefinement = Infix' (Inf' {infixLeft = Application' (App' {applicationName = Name' ("String" :| ["length"]) (), applicationArgs = Name' ("s" :| []) () :| [], annApp = ()}) (), infixOp = "==" :| [], infixRight = Constant' (Number' (Integer'' 36 ()) ()) (), annInf = ()}) (), annTypeRefine = ()}) (), annInf = ()}) ()) (), annLike = ()}) ()) () :| [Type' (Typ' {typeUsage = Nothing, typeName' = "Storage", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' ("Nat" :| ["T"]) (), nameTypeName = Concrete' "total-supply" (), annNameType' = ()} :| [NameType'' {nameTypeSignature = RefinedE' (TypeRefine' {typeRefineName = Name' ("Accounts" :| ["T"]) (), typeRefineRefinement = Infix' (Inf' {infixLeft = Name' ("Accounts" :| ["measure-value"]) (), infixOp = "==" :| [], infixRight = Name' ("total-supply" :| []) (), annInf = ()}) (), annTypeRefine = ()}) (), nameTypeName = Concrete' "accounts" (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) (),Signature' (Sig' {signatureName = "empty-storage", signatureUsage = Nothing, signatureArrowType = Name' ("Storage" :| []) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = "empty-storage", functionLikeArgs = [], functionLikeBody = Body' (ExpRecord' (ExpressionRecord' {expRecordFields = NonPunned' ("total-supply" :| []) (Constant' (Number' (Integer'' 0 ()) ()) ()) () :| [NonPunned' ("accounts" :| []) (Name' ("Accounts" :| ["empty"]) ()) ()], annExpressionRecord = ()}) ()) (), annLike = ()}) ()) (),Type' (Typ' {typeUsage = Nothing, typeName' = "T", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' ("Storage" :| []) (), nameTypeName = Concrete' "storage" (), annNameType' = ()} :| [NameType'' {nameTypeSignature = Name' ("Nat" :| ["T"]) (), nameTypeName = Concrete' "version" (), annNameType' = ()},NameType'' {nameTypeSignature = Name' ("String" :| ["T"]) (), nameTypeName = Concrete' "name" (), annNameType' = ()},NameType'' {nameTypeSignature = Name' ("Char" :| ["T"]) (), nameTypeName = Concrete' "symbol" (), annNameType' = ()},NameType'' {nameTypeSignature = Name' ("Address" :| []) (), nameTypeName = Concrete' "owner" (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) ()]) (), annLike = ()}) ()) (),Module' (Mod' (Like' {functionLikedName = "Transaction", functionLikeArgs = [], functionLikeBody = Body' (Type' (Typ' {typeUsage = Nothing, typeName' = "Transfer", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' ("Token" :| ["Address"]) (), nameTypeName = Concrete' "from-account" (), annNameType' = ()} :| [NameType'' {nameTypeSignature = Name' ("Token" :| ["Address"]) (), nameTypeName = Concrete' "to-account" (), annNameType' = ()},NameType'' {nameTypeSignature = Name' ("Nat" :| ["T"]) (), nameTypeName = Concrete' "ammount" (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) () :| [Type' (Typ' {typeUsage = Nothing, typeName' = "Mint", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' ("Nat" :| ["T"]) (), nameTypeName = Concrete' "mint-amount" (), annNameType' = ()} :| [NameType'' {nameTypeSignature = Name' ("Token" :| ["Address"]) (), nameTypeName = Concrete' "mint-to-account" (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) (),Type' (Typ' {typeUsage = Nothing, typeName' = "Burn", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' ("Nat" :| ["T"]) (), nameTypeName = Concrete' "burn-amount" (), annNameType' = ()} :| [NameType'' {nameTypeSignature = Name' ("Token" :| ["Address"]) (), nameTypeName = Concrete' "burn-from-account" (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) (),Type' (Typ' {typeUsage = Nothing, typeName' = "Data", typeArgs = [], typeForm = NonArrowed' {dataAdt = Sum' (S' {sumConstructor = "Transfer", sumValue = Just (Arrow' (Infix' (Inf' {infixLeft = Name' ("Transfer" :| []) (), infixOp = "->" :| [], infixRight = Name' ("Data" :| []) (), annInf = ()}) ()) ()), annS = ()} :| [S' {sumConstructor = "Mint", sumValue = Just (Arrow' (Infix' (Inf' {infixLeft = Name' ("Mint" :| []) (), infixOp = "->" :| [], infixRight = Name' ("Data" :| []) (), annInf = ()}) ()) ()), annS = ()},S' {sumConstructor = "Burn", sumValue = Just (Arrow' (Infix' (Inf' {infixLeft = Name' ("Burn" :| []) (), infixOp = "->" :| [], infixRight = Name' ("Data" :| []) (), annInf = ()}) ()) ()), annS = ()}]) (), annNonArrowed = ()}, annTyp = ()}) (),Type' (Typ' {typeUsage = Nothing, typeName' = "T", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' ("Data" :| []) (), nameTypeName = Concrete' "data" (), annNameType' = ()} :| [NameType'' {nameTypeSignature = Name' ("Token" :| ["Address"]) (), nameTypeName = Concrete' "authorized-account" (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) ()]) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = "has-n", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' ("Accounts" :| ["T"]) (), infixOp = "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("Token" :| ["Address"]) (), infixOp = "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("Nat" :| []) (), infixOp = "->" :| [], infixRight = Name' ("Bool" :| []) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = "has-n", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "accounts" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "add" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "to-transfer" (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Application' (App' {applicationName = Name' ("Accounts" :| ["select"]) (), applicationArgs = Name' ("accounts" :| []) () :| [Name' ("add" :| []) ()], annApp = ()}) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' ("Just" :| []) [MatchLogic' {matchLogicContents = MatchName' "n" (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Infix' (Inf' {infixLeft = Name' ("to-transfer" :| []) (), infixOp = "<=" :| [], infixRight = Name' ("n" :| []) (), annInf = ()}) (), annMatchL = ()} :| [MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' ("Nothing" :| []) [] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Name' ("False" :| []) (), annMatchL = ()}], annMatch'' = ()}) ()) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = "account-sub", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' ("acc" :| []) (), infixOp = ":" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("Accounts" :| ["T"]) (), infixOp = "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("add" :| []) (), infixOp = ":" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("Token" :| ["Address"]) (), infixOp = "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("num" :| []) (), infixOp = ":" :| [], infixRight = Infix' (Inf' {infixLeft = RefinedE' (TypeRefine' {typeRefineName = Name' ("Nat" :| ["T"]) (), typeRefineRefinement = Application' (App' {applicationName = Name' ("has-n" :| []) (), applicationArgs = Name' ("acc" :| []) () :| [Name' ("add" :| []) (),Name' ("num" :| []) ()], annApp = ()}) (), annTypeRefine = ()}) (), infixOp = "->" :| [], infixRight = Name' ("Accounts" :| ["T"]) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = "account-sub", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "accounts" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "add" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "number" (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Application' (App' {applicationName = Name' ("Accounts" :| ["select"]) (), applicationArgs = Name' ("accounts" :| []) () :| [Name' ("add" :| []) ()], annApp = ()}) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' ("Just" :| []) [MatchLogic' {matchLogicContents = MatchName' "balance" (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Application' (App' {applicationName = Name' ("Accounts" :| ["put"]) (), applicationArgs = Name' ("accounts" :| []) () :| [Name' ("add" :| []) (),Parened' (Infix' (Inf' {infixLeft = Name' ("balance" :| []) (), infixOp = "-" :| [], infixRight = Name' ("number" :| []) (), annInf = ()}) ()) ()], annApp = ()}) (), annMatchL = ()} :| [], annMatch'' = ()}) ()) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = "account-add", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' ("Accounts" :| ["T"]) (), infixOp = "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("Token" :| ["Address"]) (), infixOp = "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("Nat" :| ["T"]) (), infixOp = "->" :| [], infixRight = Name' ("Accounts" :| ["T"]) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = "account-add", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "accounts" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "add" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "number" (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Application' (App' {applicationName = Name' ("Accounts" :| ["update"]) (), applicationArgs = Name' ("accounts" :| []) () :| [Parened' (Application' (App' {applicationName = Name' ("+" :| []) (), applicationArgs = Name' ("number" :| []) () :| [], annApp = ()}) ()) (),Name' ("add" :| []) ()], annApp = ()}) ()) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = "transfer-stor", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' ("stor" :| []) (), infixOp = ":" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("Token" :| ["Storage"]) (), infixOp = "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("from" :| []) (), infixOp = ":" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("Token" :| ["Address"]) (), infixOp = "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("to" :| []) (), infixOp = ":" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("Token" :| ["Address"]) (), infixOp = "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("num" :| []) (), infixOp = ":" :| [], infixRight = Infix' (Inf' {infixLeft = RefinedE' (TypeRefine' {typeRefineName = Name' ("Nat" :| ["T"]) (), typeRefineRefinement = Application' (App' {applicationName = Name' ("has-n" :| []) (), applicationArgs = Name' ("stor" :| ["accounts"]) () :| [Name' ("from" :| []) (),Name' ("num" :| []) ()], annApp = ()}) (), annTypeRefine = ()}) (), infixOp = "->" :| [], infixRight = Name' ("Token" :| ["Storage"]) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = "transfer-stor", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "stor" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "add-from" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "add-to" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "num" (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Let' (Let''' {letBindings = Like' {functionLikedName = "new-acc", functionLikeArgs = [], functionLikeBody = Body' (Application' (App' {applicationName = Name' ("account-add" :| []) (), applicationArgs = Parened' (Application' (App' {applicationName = Name' ("account-sub" :| []) (), applicationArgs = Name' ("stor" :| ["accounts"]) () :| [Name' ("add-from" :| []) ()], annApp = ()}) ()) () :| [Name' ("add-to" :| []) (),Name' ("num" :| []) ()], annApp = ()}) ()) (), annLike = ()}, letBody = ExpRecord' (ExpressionRecord' {expRecordFields = NonPunned' ("total-supply" :| []) (Name' ("stor" :| ["total-supply"]) ()) () :| [NonPunned' ("accounts" :| []) (Name' ("new-acc" :| []) ()) ()], annExpressionRecord = ()}) (), annLet'' = ()}) ()) (), annLike = ()}) ()) (),Module' (Mod' (Like' {functionLikedName = "Validation", functionLikeArgs = [], functionLikeBody = Body' (Function' (Func' (Like' {functionLikedName = "T", functionLikeArgs = [], functionLikeBody = Body' (Infix' (Inf' {infixLeft = Name' ("Token" :| ["T"]) (), infixOp = "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("Transaction" :| ["T"]) (), infixOp = "->" :| [], infixRight = Name' ("Bool" :| []) (), annInf = ()}) (), annInf = ()}) ()) (), annLike = ()}) ()) () :| [Function' (Func' (Like' {functionLikedName = "mint", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "token" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "tx" (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Name' ("tx" :| ["data"]) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' ("Transaction" :| ["Mint"]) [] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Infix' (Inf' {infixLeft = Name' ("token" :| ["owner"]) (), infixOp = "==" :| [], infixRight = Name' ("tx" :| ["authorized-account"]) (), annInf = ()}) (), annMatchL = ()} :| [MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchName' "_" (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Name' ("false" :| []) (), annMatchL = ()}], annMatch'' = ()}) ()) (), annLike = ()}) ()) (),Function' (Func' (Like' {functionLikedName = "transfer", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "token" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "tx" (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Name' ("tx" :| ["data"]) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' ("Transaction" :| ["Transfer"]) [MatchLogic' {matchLogicContents = MatchRecord' (Punned' ("from-account" :| []) () :| [Punned' ("amount" :| []) ()]) (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Infix' (Inf' {infixLeft = Application' (App' {applicationName = Name' ("has-n" :| []) (), applicationArgs = Name' ("token" :| ["storage","accounts"]) () :| [Name' ("from-account" :| []) (),Name' ("amount" :| []) ()], annApp = ()}) (), infixOp = "&&" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("tx" :| ["authorized-account"]) (), infixOp = "==" :| [], infixRight = Name' ("from-account" :| []) (), annInf = ()}) (), annInf = ()}) (), annMatchL = ()} :| [MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchName' "_" (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Name' ("false" :| []) (), annMatchL = ()}], annMatch'' = ()}) ()) (), annLike = ()}) ()) (),Function' (Func' (Like' {functionLikedName = "Burn", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "token" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "tx" (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Name' ("tx" :| ["data"]) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' ("Transaction" :| ["Burn"]) [MatchLogic' {matchLogicContents = MatchRecord' (Punned' ("burn-from-account" :| []) () :| [Punned' ("burn-amount" :| []) ()]) (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Infix' (Inf' {infixLeft = Application' (App' {applicationName = Name' ("has-n" :| []) (), applicationArgs = Name' ("token" :| ["storage","accounts"]) () :| [Name' ("burn-from-account" :| []) (),Name' ("burn-amount" :| []) ()], annApp = ()}) (), infixOp = "&&" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("tx" :| ["authorized-account"]) (), infixOp = "==" :| [], infixRight = Name' ("burn-from-account" :| []) (), annInf = ()}) (), annInf = ()}) (), annMatchL = ()} :| [MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchName' "_" (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Name' ("false" :| []) (), annMatchL = ()}], annMatch'' = ()}) ()) (), annLike = ()}) ()) ()]) (), annLike = ()}) ()) (),Type' (Typ' {typeUsage = Nothing, typeName' = "Error", typeArgs = [], typeForm = NonArrowed' {dataAdt = Sum' (S' {sumConstructor = "NotEnoughFunds", sumValue = Just (ADTLike' [] ()), annS = ()} :| [S' {sumConstructor = "NotSameAccount", sumValue = Just (ADTLike' [] ()), annS = ()},S' {sumConstructor = "NotOwnerToken", sumValue = Just (ADTLike' [] ()), annS = ()},S' {sumConstructor = "NotEnoughTokens", sumValue = Just (ADTLike' [] ()), annS = ()}]) (), annNonArrowed = ()}, annTyp = ()}) (),Signature' (Sig' {signatureName = "exec", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' ("Token" :| ["T"]) (), infixOp = "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' ("Transaction" :| ["T"]) (), infixOp = "->" :| [], infixRight = Application' (App' {applicationName = Name' ("Either" :| ["T"]) (), applicationArgs = Name' ("Error" :| []) () :| [Name' ("Token" :| ["T"]) ()], annApp = ()}) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = "exec", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "token" (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' "tx" (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Name' ("tx" :| ["data"]) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' ("Transfer" :| []) [MatchLogic' {matchLogicContents = MatchName' "_" (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Cond' (C' (CondExpression' {condLogicPred = Application' (App' {applicationName = Name' ("Validation" :| ["transfer"]) (), applicationArgs = Name' ("token" :| []) () :| [Name' ("tx" :| []) ()], annApp = ()}) (), condLogicBody = Application' (App' {applicationName = Name' ("Right" :| []) (), applicationArgs = Parened' (Application' (App' {applicationName = Name' ("transfer" :| []) (), applicationArgs = Name' ("token" :| []) () :| [Name' ("tx" :| []) ()], annApp = ()}) ()) () :| [], annApp = ()}) (), annCondExpression = ()} :| [CondExpression' {condLogicPred = Name' ("else" :| []) (), condLogicBody = Application' (App' {applicationName = Name' ("Left" :| []) (), applicationArgs = Name' ("NotEnoughFunds" :| []) () :| [], annApp = ()}) (), annCondExpression = ()}]) ()) (), annMatchL = ()} :| [MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' ("Mint" :| []) [MatchLogic' {matchLogicContents = MatchName' "_" (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Cond' (C' (CondExpression' {condLogicPred = Application' (App' {applicationName = Name' ("Validation" :| ["mint"]) (), applicationArgs = Name' ("token" :| []) () :| [Name' ("tx" :| []) ()], annApp = ()}) (), condLogicBody = Application' (App' {applicationName = Name' ("Right" :| []) (), applicationArgs = Parened' (Application' (App' {applicationName = Name' ("mint" :| []) (), applicationArgs = Name' ("token" :| []) () :| [Name' ("tx" :| []) ()], annApp = ()}) ()) () :| [], annApp = ()}) (), annCondExpression = ()} :| [CondExpression' {condLogicPred = Name' ("else" :| []) (), condLogicBody = Application' (App' {applicationName = Name' ("Left" :| []) (), applicationArgs = Name' ("NotEnoughFunds" :| []) () :| [], annApp = ()}) (), annCondExpression = ()}]) ()) (), annMatchL = ()}], annMatch'' = ()}) ()) (), annLike = ()}) ()) ()]