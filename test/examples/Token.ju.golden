[Module' (Mod' (Like' {functionLikedName = Sym "Token", functionLikeArgs = [], functionLikeBody = Body' (Function' (Func' (Like' {functionLikedName = Sym "Address", functionLikeArgs = [], functionLikeBody = Body' (Infix' (Inf' {infixLeft = Name' (Sym "s" :| []) (), infixOp = Sym ":" :| [], infixRight = RefinedE' (TypeRefine' {typeRefineName = Name' (Sym "String" :| [Sym "T"]) (), typeRefineRefinement = Infix' (Inf' {infixLeft = Application' (App' {applicationName = Name' (Sym "String" :| [Sym "length"]) (), applicationArgs = Name' (Sym "s" :| []) () :| [], annApp = ()}) (), infixOp = Sym "==" :| [], infixRight = Constant' (Number' (Integer'' 36 ()) ()) (), annInf = ()}) (), annTypeRefine = ()}) (), annInf = ()}) ()) (), annLike = ()}) ()) () :| [Type' (Typ' {typeUsage = Nothing, typeName' = Sym "Storage", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' (Sym "Nat" :| [Sym "T"]) (), nameTypeName = Concrete' (Sym "total-supply") (), annNameType' = ()} :| [NameType'' {nameTypeSignature = RefinedE' (TypeRefine' {typeRefineName = Name' (Sym "Accounts" :| [Sym "T"]) (), typeRefineRefinement = Infix' (Inf' {infixLeft = Name' (Sym "Accounts" :| [Sym "measure-value"]) (), infixOp = Sym "==" :| [], infixRight = Name' (Sym "total-supply" :| []) (), annInf = ()}) (), annTypeRefine = ()}) (), nameTypeName = Concrete' (Sym "accounts") (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) (),Signature' (Sig' {signatureName = Sym "empty-storage", signatureUsage = Nothing, signatureArrowType = Name' (Sym "Storage" :| []) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = Sym "empty-storage", functionLikeArgs = [], functionLikeBody = Body' (ExpRecord' (ExpressionRecord' {expRecordFields = NonPunned' (Sym "total-supply" :| []) (Constant' (Number' (Integer'' 0 ()) ()) ()) () :| [NonPunned' (Sym "accounts" :| []) (Name' (Sym "Accounts" :| [Sym "empty"]) ()) ()], annExpressionRecord = ()}) ()) (), annLike = ()}) ()) (),Type' (Typ' {typeUsage = Nothing, typeName' = Sym "T", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' (Sym "Storage" :| []) (), nameTypeName = Concrete' (Sym "storage") (), annNameType' = ()} :| [NameType'' {nameTypeSignature = Name' (Sym "Nat" :| [Sym "T"]) (), nameTypeName = Concrete' (Sym "version") (), annNameType' = ()},NameType'' {nameTypeSignature = Name' (Sym "String" :| [Sym "T"]) (), nameTypeName = Concrete' (Sym "name") (), annNameType' = ()},NameType'' {nameTypeSignature = Name' (Sym "Char" :| [Sym "T"]) (), nameTypeName = Concrete' (Sym "symbol") (), annNameType' = ()},NameType'' {nameTypeSignature = Name' (Sym "Address" :| []) (), nameTypeName = Concrete' (Sym "owner") (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) ()]) (), annLike = ()}) ()) (),Module' (Mod' (Like' {functionLikedName = Sym "Transaction", functionLikeArgs = [], functionLikeBody = Body' (Type' (Typ' {typeUsage = Nothing, typeName' = Sym "Transfer", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' (Sym "Token" :| [Sym "Address"]) (), nameTypeName = Concrete' (Sym "from-account") (), annNameType' = ()} :| [NameType'' {nameTypeSignature = Name' (Sym "Token" :| [Sym "Address"]) (), nameTypeName = Concrete' (Sym "to-account") (), annNameType' = ()},NameType'' {nameTypeSignature = Name' (Sym "Nat" :| [Sym "T"]) (), nameTypeName = Concrete' (Sym "ammount") (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) () :| [Type' (Typ' {typeUsage = Nothing, typeName' = Sym "Mint", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' (Sym "Nat" :| [Sym "T"]) (), nameTypeName = Concrete' (Sym "mint-amount") (), annNameType' = ()} :| [NameType'' {nameTypeSignature = Name' (Sym "Token" :| [Sym "Address"]) (), nameTypeName = Concrete' (Sym "mint-to-account") (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) (),Type' (Typ' {typeUsage = Nothing, typeName' = Sym "Burn", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' (Sym "Nat" :| [Sym "T"]) (), nameTypeName = Concrete' (Sym "burn-amount") (), annNameType' = ()} :| [NameType'' {nameTypeSignature = Name' (Sym "Token" :| [Sym "Address"]) (), nameTypeName = Concrete' (Sym "burn-from-account") (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) (),Type' (Typ' {typeUsage = Nothing, typeName' = Sym "Data", typeArgs = [], typeForm = NonArrowed' {dataAdt = Sum' (S' {sumConstructor = Sym "Transfer", sumValue = Just (Arrow' (Infix' (Inf' {infixLeft = Name' (Sym "Transfer" :| []) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "Data" :| []) (), annInf = ()}) ()) ()), annS = ()} :| [S' {sumConstructor = Sym "Mint", sumValue = Just (Arrow' (Infix' (Inf' {infixLeft = Name' (Sym "Mint" :| []) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "Data" :| []) (), annInf = ()}) ()) ()), annS = ()},S' {sumConstructor = Sym "Burn", sumValue = Just (Arrow' (Infix' (Inf' {infixLeft = Name' (Sym "Burn" :| []) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "Data" :| []) (), annInf = ()}) ()) ()), annS = ()}]) (), annNonArrowed = ()}, annTyp = ()}) (),Type' (Typ' {typeUsage = Nothing, typeName' = Sym "T", typeArgs = [], typeForm = NonArrowed' {dataAdt = Product' (Record' (Record''' {recordFields = NameType'' {nameTypeSignature = Name' (Sym "Data" :| []) (), nameTypeName = Concrete' (Sym "data") (), annNameType' = ()} :| [NameType'' {nameTypeSignature = Name' (Sym "Token" :| [Sym "Address"]) (), nameTypeName = Concrete' (Sym "authorized-account") (), annNameType' = ()}], recordFamilySignature = Nothing, annRecord'' = ()}) ()) (), annNonArrowed = ()}, annTyp = ()}) ()]) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = Sym "has-n", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' (Sym "Accounts" :| [Sym "T"]) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "Token" :| [Sym "Address"]) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "Nat" :| []) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "Bool" :| []) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = Sym "has-n", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "accounts") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "add") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "to-transfer") (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Application' (App' {applicationName = Name' (Sym "Accounts" :| [Sym "select"]) (), applicationArgs = Name' (Sym "accounts" :| []) () :| [Name' (Sym "add" :| []) ()], annApp = ()}) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' (Sym "Just" :| []) [MatchLogic' {matchLogicContents = MatchName' (Sym "n") (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Infix' (Inf' {infixLeft = Name' (Sym "to-transfer" :| []) (), infixOp = Sym "<=" :| [], infixRight = Name' (Sym "n" :| []) (), annInf = ()}) (), annMatchL = ()} :| [MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' (Sym "Nothing" :| []) [] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Name' (Sym "False" :| []) (), annMatchL = ()}], annMatch'' = ()}) ()) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = Sym "account-sub", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' (Sym "acc" :| []) (), infixOp = Sym ":" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "Accounts" :| [Sym "T"]) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "add" :| []) (), infixOp = Sym ":" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "Token" :| [Sym "Address"]) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "num" :| []) (), infixOp = Sym ":" :| [], infixRight = Infix' (Inf' {infixLeft = RefinedE' (TypeRefine' {typeRefineName = Name' (Sym "Nat" :| [Sym "T"]) (), typeRefineRefinement = Application' (App' {applicationName = Name' (Sym "has-n" :| []) (), applicationArgs = Name' (Sym "acc" :| []) () :| [Name' (Sym "add" :| []) (),Name' (Sym "num" :| []) ()], annApp = ()}) (), annTypeRefine = ()}) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "Accounts" :| [Sym "T"]) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = Sym "account-sub", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "accounts") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "add") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "number") (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Application' (App' {applicationName = Name' (Sym "Accounts" :| [Sym "select"]) (), applicationArgs = Name' (Sym "accounts" :| []) () :| [Name' (Sym "add" :| []) ()], annApp = ()}) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' (Sym "Just" :| []) [MatchLogic' {matchLogicContents = MatchName' (Sym "balance") (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Application' (App' {applicationName = Name' (Sym "Accounts" :| [Sym "put"]) (), applicationArgs = Name' (Sym "accounts" :| []) () :| [Name' (Sym "add" :| []) (),Parened' (Infix' (Inf' {infixLeft = Name' (Sym "balance" :| []) (), infixOp = Sym "-" :| [], infixRight = Name' (Sym "number" :| []) (), annInf = ()}) ()) ()], annApp = ()}) (), annMatchL = ()} :| [], annMatch'' = ()}) ()) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = Sym "account-add", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' (Sym "Accounts" :| [Sym "T"]) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "Token" :| [Sym "Address"]) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "Nat" :| [Sym "T"]) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "Accounts" :| [Sym "T"]) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = Sym "account-add", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "accounts") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "add") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "number") (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Application' (App' {applicationName = Name' (Sym "Accounts" :| [Sym "update"]) (), applicationArgs = Name' (Sym "accounts" :| []) () :| [Parened' (Application' (App' {applicationName = Name' (Sym "+" :| []) (), applicationArgs = Name' (Sym "number" :| []) () :| [], annApp = ()}) ()) (),Name' (Sym "add" :| []) ()], annApp = ()}) ()) (), annLike = ()}) ()) (),Signature' (Sig' {signatureName = Sym "transfer-stor", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' (Sym "stor" :| []) (), infixOp = Sym ":" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "Token" :| [Sym "Storage"]) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "from" :| []) (), infixOp = Sym ":" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "Token" :| [Sym "Address"]) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "to" :| []) (), infixOp = Sym ":" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "Token" :| [Sym "Address"]) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "num" :| []) (), infixOp = Sym ":" :| [], infixRight = Infix' (Inf' {infixLeft = RefinedE' (TypeRefine' {typeRefineName = Name' (Sym "Nat" :| [Sym "T"]) (), typeRefineRefinement = Application' (App' {applicationName = Name' (Sym "has-n" :| []) (), applicationArgs = Name' (Sym "stor" :| [Sym "accounts"]) () :| [Name' (Sym "from" :| []) (),Name' (Sym "num" :| []) ()], annApp = ()}) (), annTypeRefine = ()}) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "Token" :| [Sym "Storage"]) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = Sym "transfer-stor", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "stor") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "add-from") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "add-to") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "num") (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Let' (Let''' {letBindings = Like' {functionLikedName = Sym "new-acc", functionLikeArgs = [], functionLikeBody = Body' (Application' (App' {applicationName = Name' (Sym "account-add" :| []) (), applicationArgs = Parened' (Application' (App' {applicationName = Name' (Sym "account-sub" :| []) (), applicationArgs = Name' (Sym "stor" :| [Sym "accounts"]) () :| [Name' (Sym "add-from" :| []) ()], annApp = ()}) ()) () :| [Name' (Sym "add-to" :| []) (),Name' (Sym "num" :| []) ()], annApp = ()}) ()) (), annLike = ()}, letBody = ExpRecord' (ExpressionRecord' {expRecordFields = NonPunned' (Sym "total-supply" :| []) (Name' (Sym "stor" :| [Sym "total-supply"]) ()) () :| [NonPunned' (Sym "accounts" :| []) (Name' (Sym "new-acc" :| []) ()) ()], annExpressionRecord = ()}) (), annLet'' = ()}) ()) (), annLike = ()}) ()) (),Module' (Mod' (Like' {functionLikedName = Sym "Validation", functionLikeArgs = [], functionLikeBody = Body' (Function' (Func' (Like' {functionLikedName = Sym "T", functionLikeArgs = [], functionLikeBody = Body' (Infix' (Inf' {infixLeft = Name' (Sym "Token" :| [Sym "T"]) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "Transaction" :| [Sym "T"]) (), infixOp = Sym "->" :| [], infixRight = Name' (Sym "Bool" :| []) (), annInf = ()}) (), annInf = ()}) ()) (), annLike = ()}) ()) () :| [Function' (Func' (Like' {functionLikedName = Sym "mint", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "token") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "tx") (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Name' (Sym "tx" :| [Sym "data"]) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' (Sym "Transaction" :| [Sym "Mint"]) [] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Infix' (Inf' {infixLeft = Name' (Sym "token" :| [Sym "owner"]) (), infixOp = Sym "==" :| [], infixRight = Name' (Sym "tx" :| [Sym "authorized-account"]) (), annInf = ()}) (), annMatchL = ()} :| [MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchName' (Sym "_") (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Name' (Sym "false" :| []) (), annMatchL = ()}], annMatch'' = ()}) ()) (), annLike = ()}) ()) (),Function' (Func' (Like' {functionLikedName = Sym "transfer", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "token") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "tx") (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Name' (Sym "tx" :| [Sym "data"]) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' (Sym "Transaction" :| [Sym "Transfer"]) [MatchLogic' {matchLogicContents = MatchRecord' (Punned' (Sym "from-account" :| []) () :| [Punned' (Sym "amount" :| []) ()]) (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Infix' (Inf' {infixLeft = Application' (App' {applicationName = Name' (Sym "has-n" :| []) (), applicationArgs = Name' (Sym "token" :| [Sym "storage",Sym "accounts"]) () :| [Name' (Sym "from-account" :| []) (),Name' (Sym "amount" :| []) ()], annApp = ()}) (), infixOp = Sym "&&" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "tx" :| [Sym "authorized-account"]) (), infixOp = Sym "==" :| [], infixRight = Name' (Sym "from-account" :| []) (), annInf = ()}) (), annInf = ()}) (), annMatchL = ()} :| [MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchName' (Sym "_") (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Name' (Sym "false" :| []) (), annMatchL = ()}], annMatch'' = ()}) ()) (), annLike = ()}) ()) (),Function' (Func' (Like' {functionLikedName = Sym "Burn", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "token") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "tx") (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Name' (Sym "tx" :| [Sym "data"]) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' (Sym "Transaction" :| [Sym "Burn"]) [MatchLogic' {matchLogicContents = MatchRecord' (Punned' (Sym "burn-from-account" :| []) () :| [Punned' (Sym "burn-amount" :| []) ()]) (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Infix' (Inf' {infixLeft = Application' (App' {applicationName = Name' (Sym "has-n" :| []) (), applicationArgs = Name' (Sym "token" :| [Sym "storage",Sym "accounts"]) () :| [Name' (Sym "burn-from-account" :| []) (),Name' (Sym "burn-amount" :| []) ()], annApp = ()}) (), infixOp = Sym "&&" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "tx" :| [Sym "authorized-account"]) (), infixOp = Sym "==" :| [], infixRight = Name' (Sym "burn-from-account" :| []) (), annInf = ()}) (), annInf = ()}) (), annMatchL = ()} :| [MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchName' (Sym "_") (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Name' (Sym "false" :| []) (), annMatchL = ()}], annMatch'' = ()}) ()) (), annLike = ()}) ()) ()]) (), annLike = ()}) ()) (),Type' (Typ' {typeUsage = Nothing, typeName' = Sym "Error", typeArgs = [], typeForm = NonArrowed' {dataAdt = Sum' (S' {sumConstructor = Sym "NotEnoughFunds", sumValue = Just (ADTLike' [] ()), annS = ()} :| [S' {sumConstructor = Sym "NotSameAccount", sumValue = Just (ADTLike' [] ()), annS = ()},S' {sumConstructor = Sym "NotOwnerToken", sumValue = Just (ADTLike' [] ()), annS = ()},S' {sumConstructor = Sym "NotEnoughTokens", sumValue = Just (ADTLike' [] ()), annS = ()}]) (), annNonArrowed = ()}, annTyp = ()}) (),Signature' (Sig' {signatureName = Sym "exec", signatureUsage = Nothing, signatureArrowType = Infix' (Inf' {infixLeft = Name' (Sym "Token" :| [Sym "T"]) (), infixOp = Sym "->" :| [], infixRight = Infix' (Inf' {infixLeft = Name' (Sym "Transaction" :| [Sym "T"]) (), infixOp = Sym "->" :| [], infixRight = Application' (App' {applicationName = Name' (Sym "Either" :| [Sym "T"]) (), applicationArgs = Name' (Sym "Error" :| []) () :| [Name' (Sym "Token" :| [Sym "T"]) ()], annApp = ()}) (), annInf = ()}) (), annInf = ()}) (), signatureConstraints = [], annSig = ()}) (),Function' (Func' (Like' {functionLikedName = Sym "exec", functionLikeArgs = [ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "token") (), matchLogicNamed = Nothing, annMatchLogic = ()}) (),ConcreteA' (MatchLogic' {matchLogicContents = MatchName' (Sym "tx") (), matchLogicNamed = Nothing, annMatchLogic = ()}) ()], functionLikeBody = Body' (Match' (Match''' {matchOn = Name' (Sym "tx" :| [Sym "data"]) (), matchBindigns = MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' (Sym "Transfer" :| []) [MatchLogic' {matchLogicContents = MatchName' (Sym "_") (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Cond' (C' (CondExpression' {condLogicPred = Application' (App' {applicationName = Name' (Sym "Validation" :| [Sym "transfer"]) (), applicationArgs = Name' (Sym "token" :| []) () :| [Name' (Sym "tx" :| []) ()], annApp = ()}) (), condLogicBody = Application' (App' {applicationName = Name' (Sym "Right" :| []) (), applicationArgs = Parened' (Application' (App' {applicationName = Name' (Sym "transfer" :| []) (), applicationArgs = Name' (Sym "token" :| []) () :| [Name' (Sym "tx" :| []) ()], annApp = ()}) ()) () :| [], annApp = ()}) (), annCondExpression = ()} :| [CondExpression' {condLogicPred = Name' (Sym "else" :| []) (), condLogicBody = Application' (App' {applicationName = Name' (Sym "Left" :| []) (), applicationArgs = Name' (Sym "NotEnoughFunds" :| []) () :| [], annApp = ()}) (), annCondExpression = ()}]) ()) (), annMatchL = ()} :| [MatchL' {matchLPattern = MatchLogic' {matchLogicContents = MatchCon' (Sym "Mint" :| []) [MatchLogic' {matchLogicContents = MatchName' (Sym "_") (), matchLogicNamed = Nothing, annMatchLogic = ()}] (), matchLogicNamed = Nothing, annMatchLogic = ()}, matchLBody = Cond' (C' (CondExpression' {condLogicPred = Application' (App' {applicationName = Name' (Sym "Validation" :| [Sym "mint"]) (), applicationArgs = Name' (Sym "token" :| []) () :| [Name' (Sym "tx" :| []) ()], annApp = ()}) (), condLogicBody = Application' (App' {applicationName = Name' (Sym "Right" :| []) (), applicationArgs = Parened' (Application' (App' {applicationName = Name' (Sym "mint" :| []) (), applicationArgs = Name' (Sym "token" :| []) () :| [Name' (Sym "tx" :| []) ()], annApp = ()}) ()) () :| [], annApp = ()}) (), annCondExpression = ()} :| [CondExpression' {condLogicPred = Name' (Sym "else" :| []) (), condLogicBody = Application' (App' {applicationName = Name' (Sym "Left" :| []) (), applicationArgs = Name' (Sym "NotEnoughFunds" :| []) () :| [], annApp = ()}) (), annCondExpression = ()}]) ()) (), annMatchL = ()}], annMatch'' = ()}) ()) (), annLike = ()}) ()) ()]